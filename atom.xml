<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bonjour!</title>
  <subtitle>正在输入...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-10-12T11:44:31.455Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BonjourChen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>南京邮电大学网络攻防训练平台题解——隐写术</title>
    <link href="http://yoursite.com/2016/10/12/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E8%AE%AD%E7%BB%83%E5%B9%B3%E5%8F%B0%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E9%9A%90%E5%86%99%E6%9C%AF/"/>
    <id>http://yoursite.com/2016/10/12/南京邮电大学网络攻防训练平台题解——隐写术/</id>
    <published>2016-10-12T11:38:49.000Z</published>
    <updated>2016-10-12T11:44:31.455Z</updated>
    
    <content type="html"><![CDATA[<p>记录下隐写术部分的简单Writeup。</p>
<h3 id="女神"><a href="#女神" class="headerlink" title="女神"></a>女神</h3><p>用UE打开拉到最后可看到flag：<code>nctf{pic_yin_xie_shu}</code></p>
<h3 id="图种"><a href="#图种" class="headerlink" title="图种"></a>图种</h3><p>用binwalk可以看出里面还藏着一个zip，里面还有一张gif。打开gif，按照题目要求，最后一句话的拼音首字母。<br>提交flag：<code>nctf{dssdcmlw}</code></p>
<h3 id="丘比龙De女神"><a href="#丘比龙De女神" class="headerlink" title="丘比龙De女神"></a>丘比龙De女神</h3><p>提示里面藏了一张图片。先用binwalk分析，没什么结果。用winhex打开，之后发现文件末尾有个nvshen.jpg。还有个文件zip压缩文件的尾部504B0506。<br>然后再搜索一下nvshen.jpg，上面也出现了一次。<br><img src="http://oexmgtl4i.bkt.clouddn.com/github.io/02.png" alt="Alt text"><br>然后还看到了上面红框那段，zip文件头的一部分。从这部分到文件尾部，抠出来，补上504B0304，然后将14000100改成14000000（去掉zip的伪加密），重命名为zip后缀。打开之后，解压密码为上面看到的love。就可以解压出图片了。然后放在kali里面计算图片md5值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@kali:~/Documents# md5sum nvshen.jpg</div><div class="line">a6caad3aaafa11b6d5ed583bef4d8a54  nvshen.jpg</div></pre></td></tr></table></figure></p>
<p>提交flag：<code>flag{a6caad3aaafa11b6d5ed583bef4d8a54}</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下隐写术部分的简单Writeup。&lt;/p&gt;
&lt;h3 id=&quot;女神&quot;&gt;&lt;a href=&quot;#女神&quot; class=&quot;headerlink&quot; title=&quot;女神&quot;&gt;&lt;/a&gt;女神&lt;/h3&gt;&lt;p&gt;用UE打开拉到最后可看到flag：&lt;code&gt;nctf{pic_yin_xie_shu
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="隐写术" scheme="http://yoursite.com/tags/%E9%9A%90%E5%86%99%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>南京邮电大学网络攻防训练平台题解——MISC</title>
    <link href="http://yoursite.com/2016/10/12/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E8%AE%AD%E7%BB%83%E5%B9%B3%E5%8F%B0%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94MISC/"/>
    <id>http://yoursite.com/2016/10/12/南京邮电大学网络攻防训练平台题解——MISC/</id>
    <published>2016-10-12T11:31:04.000Z</published>
    <updated>2016-10-12T11:44:49.367Z</updated>
    
    <content type="html"><![CDATA[<p>记录下MISC部分的简单Writeup。</p>
<h3 id="easy-wireshark"><a href="#easy-wireshark" class="headerlink" title="easy wireshark"></a>easy wireshark</h3><p>查看http流量，可以发现有个flag.php的请求，追踪TCP流可以获得flag：<code>nctf{wireshark_is_easy}</code><br><img src="http://oexmgtl4i.bkt.clouddn.com/github.io/01.png" alt="Alt text"></p>
<h3 id="wireshark-2"><a href="#wireshark-2" class="headerlink" title="wireshark 2"></a>wireshark 2</h3><p>分析http流的时候很容易发现有个secret.txt，打开之后可以看到内容：the password for zip file is : ZipYourMouth<br>那么接下来就是找zip了。然后可以发现上面有个flag.zip，尝试提取出来。发现提取出来是坏的，用winrar无法修复。<br>折腾了一阵然后就找writeup了。原来flag真的不在这里，坑。<br>在pcap文件中直接查找zip文件头Hex：504B0304，可以发现在1139行还有一个zip。里面有个flag.txt。<br>提取出来之后，用winrar修复，根据上面找到的压缩包密码就可以解压了。打开就是flag：Flag-qscet5234diQ。根据题目要求转换成小写就O了。最后提交flag：<code>flag-qscet5234diq</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下MISC部分的简单Writeup。&lt;/p&gt;
&lt;h3 id=&quot;easy-wireshark&quot;&gt;&lt;a href=&quot;#easy-wireshark&quot; class=&quot;headerlink&quot; title=&quot;easy wireshark&quot;&gt;&lt;/a&gt;easy wireshark&lt;/
    
    </summary>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="MISC" scheme="http://yoursite.com/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>Flask+uwsgi+Nginx部署应用</title>
    <link href="http://yoursite.com/2016/10/12/Flask-uwsgi-Nginx%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2016/10/12/Flask-uwsgi-Nginx部署应用/</id>
    <published>2016-10-12T05:13:31.000Z</published>
    <updated>2016-10-12T07:01:37.216Z</updated>
    
    <content type="html"><![CDATA[<p>之前用Flask写了个网站，然后就想部署到云主机上。搜索了一番，决定采用的部署方案是：</p>
<ul>
<li>Web 服务器采用uWSGI</li>
<li>用Supervisor引用uwsgi 作为常规启动服务</li>
<li>基于Nginx作反向代理</li>
</ul>
<a id="more"></a>
<h2 id="安装Python环境，Flask"><a href="#安装Python环境，Flask" class="headerlink" title="安装Python环境，Flask"></a>安装Python环境，Flask</h2><p>在Vultr上申请了个云主机，系统采用Ubuntu 15.10。上来先安装python环境，安装pip、virtualenv。新建一个虚拟环境venv并激活：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wb@vultr:~/myBlog$ source venv/bin/activate</div><div class="line">(venv) wb@vultr:~/myBlog$</div></pre></td></tr></table></figure></p>
<p>接下来安装Flask和Flask的依赖，这个根据项目来定。<br>我项目的启动文件manage.py如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="keyword">if</span> os.path.exists(<span class="string">'.env'</span>):</div><div class="line">	print(<span class="string">'Importing environment from .env...'</span>)</div><div class="line">	<span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">'.env'</span>):</div><div class="line">		var = line.strip().split(<span class="string">'='</span>)</div><div class="line">		<span class="keyword">if</span> len(var) == <span class="number">2</span>:</div><div class="line">			os.environ[var[<span class="number">0</span>]] = var[<span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="keyword">from</span> app <span class="keyword">import</span> create_app, db</div><div class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> User, Post</div><div class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Manager,Shell</div><div class="line"></div><div class="line">app = create_app(os.getenv(<span class="string">'FLASK_CONFIG'</span>) <span class="keyword">or</span> <span class="string">'default'</span>)</div><div class="line">manager = Manager(app)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_shell_context</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> dict(app=app,db=db,User=User)</div><div class="line"></div><div class="line">manager.add_command(<span class="string">"shell"</span>,Shell(make_context=make_shell_context))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">	manager.run()</div></pre></td></tr></table></figure></p>
<p>所以运行Flask的方式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py runserver --host 0.0.0.0</div></pre></td></tr></table></figure></p>
<p>然后打开浏览器，输入你的云主机IP加端口号（5000）如：<code>1.2.3.4:5000</code>，就可以看到你的网站了。</p>
<h2 id="安装uWSGI"><a href="#安装uWSGI" class="headerlink" title="安装uWSGI"></a>安装uWSGI</h2><p>安装uWSGI的方式也很简单，pip安装即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(venv) wb@vultr:~/myBlog$pip install uwsgi</div></pre></td></tr></table></figure></p>
<p>安装完了之后就是配置了。在项目目录下新建<code>config.ini</code>，在<code>config.ini</code>中输入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[uwsgi]</div><div class="line">master = true</div><div class="line">home = venv</div><div class="line">wsgi-file = manage.py</div><div class="line">callable = app</div><div class="line">socket = :3031</div><div class="line">processes = 4</div><div class="line">threads = 2</div><div class="line">buffer-size = 32768</div></pre></td></tr></table></figure></p>
<p>其中，<code>home</code>是虚拟环境的目录，<code>wsgi-file</code>是python启动文件，<code>callable=app</code>这个app是 manage.py 程序文件内的一个变量，这个变量的类型是 Flask的 application 类 。<code>socket</code>指定了启动时使用的端口。之前写的是<code>http = 0.0.0.0:3031</code>，但是发现运行不起来，查了stackflow之后改成了socket。<br>运行uwsgi：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(venv) wb@vultr:~/myBlog$uwsgi config.ini</div><div class="line">[uWSGI] getting INI configuration from config.ini</div><div class="line">*** Starting uWSGI 2.0.12 (64bit) on [Thu Apr 21 08:41:52 2016] ***</div><div class="line">compiled with version: 5.2.1 20151010 on 19 April 2016 02:03:42</div></pre></td></tr></table></figure></p>
<p>此时已经正常启动 uWSGI 并将 Flask 项目载入其中了，ctrl+c 关闭程序。此时在浏览器中输入<code>1.2.3.4:3031</code>就可以看到项目了。但这只是命令启动形式，关闭了就无法访问了。要使其随同服务器启动并作为后台服务运行才是运行环境的实际所需要。因此需要另外的工具引导uWSGI。</p>
<h2 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h2><p>我们使用supervisor引导uWSGI。安装方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install supervisor</div></pre></td></tr></table></figure></p>
<p>supervisor的全局配置文件在<code>/etc/supervisor/supervisor.conf</code>中，但是我们一般不改动，我们新建一个文件<code>blog_supervisor.conf</code>放在<code>/etc/supervisor/conf.d</code>目录下，里面输入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[program:blog] </div><div class="line"># 启动命令入口 </div><div class="line">command=/home/wb/myBlog/venv/bin/uwsgi /home/wb/myBlog/config.ini            </div><div class="line"># 命令程序所在目录 </div><div class="line">directory=/home/wb/myBlog</div><div class="line">#运行命令的用户名 </div><div class="line">user=wb</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">#日志地址 </div><div class="line">stdout_logfile=/home/wb/myBlog/logs/uwsgi_supervisor.log</div></pre></td></tr></table></figure></p>
<p>启动supervisor服务：<code>sudo service supervisor start</code></p>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>Nginx是个著名的反向代理服务器。安装方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nginx</div></pre></td></tr></table></figure></p>
<p>配置文件在<code>/etc/nginx/sites-available</code>中的<code>default</code>中，将其替换掉即可。新的<code>default</code>文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server &#123; </div><div class="line">  listen 80; </div><div class="line">  server_name X.X.X.X; #公网地址 </div><div class="line">  location / &#123; </div><div class="line">  include uwsgi_params;</div><div class="line">  uwsgi_pass 127.0.0.1:3031; # 指向uwsgi 所应用的内部地址,所有请求将转发给uwsgi 处理 </div><div class="line">  uwsgi_param UWSGI_PYHOME /home/wb/myBlog/venv; # 指向虚拟环境目录 </div><div class="line">  uwsgi_param UWSGI_CHDIR /home/wb/myBlog; # 指向网站根目录 </div><div class="line">  uwsgi_param UWSGI_SCRIPT manage:app; # 指定启动程序</div><div class="line">  uwsgi_read_timeout 100; </div><div class="line"> &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重启Nginx服务：<code>sudo service nginx restart</code><br>这时候打开浏览器，输入你的主机IP，就可以看到你的项目了。</p>
<p>参考：<a href="http://www.cnblogs.com/Ray-liang/p/4173923.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://www.cnblogs.com/Ray-liang/p/4173923.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前用Flask写了个网站，然后就想部署到云主机上。搜索了一番，决定采用的部署方案是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web 服务器采用uWSGI&lt;/li&gt;
&lt;li&gt;用Supervisor引用uwsgi 作为常规启动服务&lt;/li&gt;
&lt;li&gt;基于Nginx作反向代理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/10/10/hello-world/"/>
    <id>http://yoursite.com/2016/10/10/hello-world/</id>
    <published>2016-10-10T07:53:00.193Z</published>
    <updated>2016-10-10T07:53:00.203Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
